// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(devolutions_cryptoFFI)
import devolutions_cryptoFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_devolutions_crypto_uniffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_devolutions_crypto_uniffi_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureDevolutionsCryptoUniffiInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




public protocol Argon2ParametersProtocol: AnyObject, Sendable {
    
    func getBytes()  -> Data
    
}
open class Argon2Parameters: Argon2ParametersProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_devolutions_crypto_uniffi_fn_clone_argon2parameters(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_devolutions_crypto_uniffi_fn_free_argon2parameters(pointer, $0) }
    }

    
public static func newFromBytes(data: Data)throws  -> Argon2Parameters  {
    return try  FfiConverterTypeArgon2Parameters_lift(try rustCallWithError(FfiConverterTypeDevolutionsCryptoError_lift) {
    uniffi_devolutions_crypto_uniffi_fn_constructor_argon2parameters_new_from_bytes(
        FfiConverterData.lower(data),$0
    )
})
}
    

    
open func getBytes() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_devolutions_crypto_uniffi_fn_method_argon2parameters_get_bytes(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeArgon2Parameters: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Argon2Parameters

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Argon2Parameters {
        return Argon2Parameters(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Argon2Parameters) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Argon2Parameters {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Argon2Parameters, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeArgon2Parameters_lift(_ pointer: UnsafeMutableRawPointer) throws -> Argon2Parameters {
    return try FfiConverterTypeArgon2Parameters.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeArgon2Parameters_lower(_ value: Argon2Parameters) -> UnsafeMutableRawPointer {
    return FfiConverterTypeArgon2Parameters.lower(value)
}






public protocol Argon2ParametersBuilderProtocol: AnyObject, Sendable {
    
    func associatedData(value: Data)  -> Argon2ParametersBuilder
    
    func build()  -> Argon2Parameters
    
    func dcVersion(value: UInt32)  -> Argon2ParametersBuilder
    
    func iterations(value: UInt32)  -> Argon2ParametersBuilder
    
    func lanes(value: UInt32)  -> Argon2ParametersBuilder
    
    func length(value: UInt32)  -> Argon2ParametersBuilder
    
    func memory(value: UInt32)  -> Argon2ParametersBuilder
    
    func salt(value: Data)  -> Argon2ParametersBuilder
    
    func secretKey(value: Data)  -> Argon2ParametersBuilder
    
    func variant(value: Argon2Variant)  -> Argon2ParametersBuilder
    
    func version(value: Argon2Version)  -> Argon2ParametersBuilder
    
}
open class Argon2ParametersBuilder: Argon2ParametersBuilderProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_devolutions_crypto_uniffi_fn_clone_argon2parametersbuilder(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_devolutions_crypto_uniffi_fn_constructor_argon2parametersbuilder_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_devolutions_crypto_uniffi_fn_free_argon2parametersbuilder(pointer, $0) }
    }

    

    
open func associatedData(value: Data) -> Argon2ParametersBuilder  {
    return try!  FfiConverterTypeArgon2ParametersBuilder_lift(try! rustCall() {
    uniffi_devolutions_crypto_uniffi_fn_method_argon2parametersbuilder_associated_data(self.uniffiClonePointer(),
        FfiConverterData.lower(value),$0
    )
})
}
    
open func build() -> Argon2Parameters  {
    return try!  FfiConverterTypeArgon2Parameters_lift(try! rustCall() {
    uniffi_devolutions_crypto_uniffi_fn_method_argon2parametersbuilder_build(self.uniffiClonePointer(),$0
    )
})
}
    
open func dcVersion(value: UInt32) -> Argon2ParametersBuilder  {
    return try!  FfiConverterTypeArgon2ParametersBuilder_lift(try! rustCall() {
    uniffi_devolutions_crypto_uniffi_fn_method_argon2parametersbuilder_dc_version(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(value),$0
    )
})
}
    
open func iterations(value: UInt32) -> Argon2ParametersBuilder  {
    return try!  FfiConverterTypeArgon2ParametersBuilder_lift(try! rustCall() {
    uniffi_devolutions_crypto_uniffi_fn_method_argon2parametersbuilder_iterations(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(value),$0
    )
})
}
    
open func lanes(value: UInt32) -> Argon2ParametersBuilder  {
    return try!  FfiConverterTypeArgon2ParametersBuilder_lift(try! rustCall() {
    uniffi_devolutions_crypto_uniffi_fn_method_argon2parametersbuilder_lanes(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(value),$0
    )
})
}
    
open func length(value: UInt32) -> Argon2ParametersBuilder  {
    return try!  FfiConverterTypeArgon2ParametersBuilder_lift(try! rustCall() {
    uniffi_devolutions_crypto_uniffi_fn_method_argon2parametersbuilder_length(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(value),$0
    )
})
}
    
open func memory(value: UInt32) -> Argon2ParametersBuilder  {
    return try!  FfiConverterTypeArgon2ParametersBuilder_lift(try! rustCall() {
    uniffi_devolutions_crypto_uniffi_fn_method_argon2parametersbuilder_memory(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(value),$0
    )
})
}
    
open func salt(value: Data) -> Argon2ParametersBuilder  {
    return try!  FfiConverterTypeArgon2ParametersBuilder_lift(try! rustCall() {
    uniffi_devolutions_crypto_uniffi_fn_method_argon2parametersbuilder_salt(self.uniffiClonePointer(),
        FfiConverterData.lower(value),$0
    )
})
}
    
open func secretKey(value: Data) -> Argon2ParametersBuilder  {
    return try!  FfiConverterTypeArgon2ParametersBuilder_lift(try! rustCall() {
    uniffi_devolutions_crypto_uniffi_fn_method_argon2parametersbuilder_secret_key(self.uniffiClonePointer(),
        FfiConverterData.lower(value),$0
    )
})
}
    
open func variant(value: Argon2Variant) -> Argon2ParametersBuilder  {
    return try!  FfiConverterTypeArgon2ParametersBuilder_lift(try! rustCall() {
    uniffi_devolutions_crypto_uniffi_fn_method_argon2parametersbuilder_variant(self.uniffiClonePointer(),
        FfiConverterTypeArgon2Variant_lower(value),$0
    )
})
}
    
open func version(value: Argon2Version) -> Argon2ParametersBuilder  {
    return try!  FfiConverterTypeArgon2ParametersBuilder_lift(try! rustCall() {
    uniffi_devolutions_crypto_uniffi_fn_method_argon2parametersbuilder_version(self.uniffiClonePointer(),
        FfiConverterTypeArgon2Version_lower(value),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeArgon2ParametersBuilder: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Argon2ParametersBuilder

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Argon2ParametersBuilder {
        return Argon2ParametersBuilder(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Argon2ParametersBuilder) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Argon2ParametersBuilder {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Argon2ParametersBuilder, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeArgon2ParametersBuilder_lift(_ pointer: UnsafeMutableRawPointer) throws -> Argon2ParametersBuilder {
    return try FfiConverterTypeArgon2ParametersBuilder.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeArgon2ParametersBuilder_lower(_ value: Argon2ParametersBuilder) -> UnsafeMutableRawPointer {
    return FfiConverterTypeArgon2ParametersBuilder.lower(value)
}






public protocol SigningKeyPairProtocol: AnyObject, Sendable {
    
    func getPrivateKey()  -> Data
    
    func getPublicKey()  -> Data
    
}
open class SigningKeyPair: SigningKeyPairProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_devolutions_crypto_uniffi_fn_clone_signingkeypair(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_devolutions_crypto_uniffi_fn_free_signingkeypair(pointer, $0) }
    }

    
public static func newFromBytes(data: Data)throws  -> SigningKeyPair  {
    return try  FfiConverterTypeSigningKeyPair_lift(try rustCallWithError(FfiConverterTypeDevolutionsCryptoError_lift) {
    uniffi_devolutions_crypto_uniffi_fn_constructor_signingkeypair_new_from_bytes(
        FfiConverterData.lower(data),$0
    )
})
}
    

    
open func getPrivateKey() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_devolutions_crypto_uniffi_fn_method_signingkeypair_get_private_key(self.uniffiClonePointer(),$0
    )
})
}
    
open func getPublicKey() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_devolutions_crypto_uniffi_fn_method_signingkeypair_get_public_key(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSigningKeyPair: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SigningKeyPair

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SigningKeyPair {
        return SigningKeyPair(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SigningKeyPair) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SigningKeyPair {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SigningKeyPair, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSigningKeyPair_lift(_ pointer: UnsafeMutableRawPointer) throws -> SigningKeyPair {
    return try FfiConverterTypeSigningKeyPair.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSigningKeyPair_lower(_ value: SigningKeyPair) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSigningKeyPair.lower(value)
}




public struct KeyPair {
    public var publicKey: Data
    public var privateKey: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(publicKey: Data, privateKey: Data) {
        self.publicKey = publicKey
        self.privateKey = privateKey
    }
}

#if compiler(>=6)
extension KeyPair: Sendable {}
#endif


extension KeyPair: Equatable, Hashable {
    public static func ==(lhs: KeyPair, rhs: KeyPair) -> Bool {
        if lhs.publicKey != rhs.publicKey {
            return false
        }
        if lhs.privateKey != rhs.privateKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(publicKey)
        hasher.combine(privateKey)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeKeyPair: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeyPair {
        return
            try KeyPair(
                publicKey: FfiConverterData.read(from: &buf), 
                privateKey: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: KeyPair, into buf: inout [UInt8]) {
        FfiConverterData.write(value.publicKey, into: &buf)
        FfiConverterData.write(value.privateKey, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeKeyPair_lift(_ buf: RustBuffer) throws -> KeyPair {
    return try FfiConverterTypeKeyPair.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeKeyPair_lower(_ value: KeyPair) -> RustBuffer {
    return FfiConverterTypeKeyPair.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Argon2Variant {
    
    case argon2d
    case argon2i
    case argon2id
}


#if compiler(>=6)
extension Argon2Variant: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeArgon2Variant: FfiConverterRustBuffer {
    typealias SwiftType = Argon2Variant

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Argon2Variant {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .argon2d
        
        case 2: return .argon2i
        
        case 3: return .argon2id
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Argon2Variant, into buf: inout [UInt8]) {
        switch value {
        
        
        case .argon2d:
            writeInt(&buf, Int32(1))
        
        
        case .argon2i:
            writeInt(&buf, Int32(2))
        
        
        case .argon2id:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeArgon2Variant_lift(_ buf: RustBuffer) throws -> Argon2Variant {
    return try FfiConverterTypeArgon2Variant.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeArgon2Variant_lower(_ value: Argon2Variant) -> RustBuffer {
    return FfiConverterTypeArgon2Variant.lower(value)
}


extension Argon2Variant: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Argon2Version {
    
    case version10
    case version13
}


#if compiler(>=6)
extension Argon2Version: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeArgon2Version: FfiConverterRustBuffer {
    typealias SwiftType = Argon2Version

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Argon2Version {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .version10
        
        case 2: return .version13
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Argon2Version, into buf: inout [UInt8]) {
        switch value {
        
        
        case .version10:
            writeInt(&buf, Int32(1))
        
        
        case .version13:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeArgon2Version_lift(_ buf: RustBuffer) throws -> Argon2Version {
    return try FfiConverterTypeArgon2Version.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeArgon2Version_lower(_ value: Argon2Version) -> RustBuffer {
    return FfiConverterTypeArgon2Version.lower(value)
}


extension Argon2Version: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum CiphertextVersion {
    
    case latest
    case v1
    case v2
}


#if compiler(>=6)
extension CiphertextVersion: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCiphertextVersion: FfiConverterRustBuffer {
    typealias SwiftType = CiphertextVersion

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CiphertextVersion {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .latest
        
        case 2: return .v1
        
        case 3: return .v2
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CiphertextVersion, into buf: inout [UInt8]) {
        switch value {
        
        
        case .latest:
            writeInt(&buf, Int32(1))
        
        
        case .v1:
            writeInt(&buf, Int32(2))
        
        
        case .v2:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCiphertextVersion_lift(_ buf: RustBuffer) throws -> CiphertextVersion {
    return try FfiConverterTypeCiphertextVersion.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCiphertextVersion_lower(_ value: CiphertextVersion) -> RustBuffer {
    return FfiConverterTypeCiphertextVersion.lower(value)
}


extension CiphertextVersion: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum DataType {
    
    case none
    case key
    case ciphertext
    case passwordHash
    case share
    case signingKey
    case signature
    case onlineCiphertext
}


#if compiler(>=6)
extension DataType: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDataType: FfiConverterRustBuffer {
    typealias SwiftType = DataType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DataType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .none
        
        case 2: return .key
        
        case 3: return .ciphertext
        
        case 4: return .passwordHash
        
        case 5: return .share
        
        case 6: return .signingKey
        
        case 7: return .signature
        
        case 8: return .onlineCiphertext
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DataType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .none:
            writeInt(&buf, Int32(1))
        
        
        case .key:
            writeInt(&buf, Int32(2))
        
        
        case .ciphertext:
            writeInt(&buf, Int32(3))
        
        
        case .passwordHash:
            writeInt(&buf, Int32(4))
        
        
        case .share:
            writeInt(&buf, Int32(5))
        
        
        case .signingKey:
            writeInt(&buf, Int32(6))
        
        
        case .signature:
            writeInt(&buf, Int32(7))
        
        
        case .onlineCiphertext:
            writeInt(&buf, Int32(8))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDataType_lift(_ buf: RustBuffer) throws -> DataType {
    return try FfiConverterTypeDataType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDataType_lower(_ value: DataType) -> RustBuffer {
    return FfiConverterTypeDataType.lower(value)
}


extension DataType: Equatable, Hashable {}




public enum DevolutionsCryptoError: Swift.Error {

    
    
    case InvalidLength(message: String)
    
    case InvalidKeyLength(message: String)
    
    case InvalidOutputLength(message: String)
    
    case InvalidSignature(message: String)
    
    case InvalidMac(message: String)
    
    case InvalidDataType(message: String)
    
    case UnknownType(message: String)
    
    case UnknownSubtype(message: String)
    
    case UnknownVersion(message: String)
    
    case InvalidData(message: String)
    
    case NullPointer(message: String)
    
    case CryptoError(message: String)
    
    case RandomError(message: String)
    
    case IoError(message: String)
    
    case NotEnoughShares(message: String)
    
    case InconsistentVersion(message: String)
    
    case InvalidChunkLength(message: String)
    
    case PoisonedMutex(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDevolutionsCryptoError: FfiConverterRustBuffer {
    typealias SwiftType = DevolutionsCryptoError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DevolutionsCryptoError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidLength(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .InvalidKeyLength(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .InvalidOutputLength(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .InvalidSignature(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .InvalidMac(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .InvalidDataType(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .UnknownType(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 8: return .UnknownSubtype(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 9: return .UnknownVersion(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 10: return .InvalidData(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 11: return .NullPointer(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 12: return .CryptoError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 13: return .RandomError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 14: return .IoError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 15: return .NotEnoughShares(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 16: return .InconsistentVersion(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 17: return .InvalidChunkLength(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 18: return .PoisonedMutex(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DevolutionsCryptoError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .InvalidLength(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .InvalidKeyLength(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .InvalidOutputLength(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .InvalidSignature(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .InvalidMac(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .InvalidDataType(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))
        case .UnknownType(_ /* message is ignored*/):
            writeInt(&buf, Int32(7))
        case .UnknownSubtype(_ /* message is ignored*/):
            writeInt(&buf, Int32(8))
        case .UnknownVersion(_ /* message is ignored*/):
            writeInt(&buf, Int32(9))
        case .InvalidData(_ /* message is ignored*/):
            writeInt(&buf, Int32(10))
        case .NullPointer(_ /* message is ignored*/):
            writeInt(&buf, Int32(11))
        case .CryptoError(_ /* message is ignored*/):
            writeInt(&buf, Int32(12))
        case .RandomError(_ /* message is ignored*/):
            writeInt(&buf, Int32(13))
        case .IoError(_ /* message is ignored*/):
            writeInt(&buf, Int32(14))
        case .NotEnoughShares(_ /* message is ignored*/):
            writeInt(&buf, Int32(15))
        case .InconsistentVersion(_ /* message is ignored*/):
            writeInt(&buf, Int32(16))
        case .InvalidChunkLength(_ /* message is ignored*/):
            writeInt(&buf, Int32(17))
        case .PoisonedMutex(_ /* message is ignored*/):
            writeInt(&buf, Int32(18))

        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDevolutionsCryptoError_lift(_ buf: RustBuffer) throws -> DevolutionsCryptoError {
    return try FfiConverterTypeDevolutionsCryptoError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDevolutionsCryptoError_lower(_ value: DevolutionsCryptoError) -> RustBuffer {
    return FfiConverterTypeDevolutionsCryptoError.lower(value)
}


extension DevolutionsCryptoError: Equatable, Hashable {}



extension DevolutionsCryptoError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum KeyVersion {
    
    case latest
    case v1
}


#if compiler(>=6)
extension KeyVersion: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeKeyVersion: FfiConverterRustBuffer {
    typealias SwiftType = KeyVersion

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeyVersion {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .latest
        
        case 2: return .v1
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: KeyVersion, into buf: inout [UInt8]) {
        switch value {
        
        
        case .latest:
            writeInt(&buf, Int32(1))
        
        
        case .v1:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeKeyVersion_lift(_ buf: RustBuffer) throws -> KeyVersion {
    return try FfiConverterTypeKeyVersion.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeKeyVersion_lower(_ value: KeyVersion) -> RustBuffer {
    return FfiConverterTypeKeyVersion.lower(value)
}


extension KeyVersion: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum PasswordHashVersion {
    
    case latest
    case v1
}


#if compiler(>=6)
extension PasswordHashVersion: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePasswordHashVersion: FfiConverterRustBuffer {
    typealias SwiftType = PasswordHashVersion

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PasswordHashVersion {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .latest
        
        case 2: return .v1
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PasswordHashVersion, into buf: inout [UInt8]) {
        switch value {
        
        
        case .latest:
            writeInt(&buf, Int32(1))
        
        
        case .v1:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePasswordHashVersion_lift(_ buf: RustBuffer) throws -> PasswordHashVersion {
    return try FfiConverterTypePasswordHashVersion.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePasswordHashVersion_lower(_ value: PasswordHashVersion) -> RustBuffer {
    return FfiConverterTypePasswordHashVersion.lower(value)
}


extension PasswordHashVersion: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum SecretSharingVersion {
    
    case latest
    case v1
}


#if compiler(>=6)
extension SecretSharingVersion: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSecretSharingVersion: FfiConverterRustBuffer {
    typealias SwiftType = SecretSharingVersion

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SecretSharingVersion {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .latest
        
        case 2: return .v1
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SecretSharingVersion, into buf: inout [UInt8]) {
        switch value {
        
        
        case .latest:
            writeInt(&buf, Int32(1))
        
        
        case .v1:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSecretSharingVersion_lift(_ buf: RustBuffer) throws -> SecretSharingVersion {
    return try FfiConverterTypeSecretSharingVersion.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSecretSharingVersion_lower(_ value: SecretSharingVersion) -> RustBuffer {
    return FfiConverterTypeSecretSharingVersion.lower(value)
}


extension SecretSharingVersion: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum SignatureVersion {
    
    case latest
    case v1
}


#if compiler(>=6)
extension SignatureVersion: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignatureVersion: FfiConverterRustBuffer {
    typealias SwiftType = SignatureVersion

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignatureVersion {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .latest
        
        case 2: return .v1
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SignatureVersion, into buf: inout [UInt8]) {
        switch value {
        
        
        case .latest:
            writeInt(&buf, Int32(1))
        
        
        case .v1:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignatureVersion_lift(_ buf: RustBuffer) throws -> SignatureVersion {
    return try FfiConverterTypeSignatureVersion.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignatureVersion_lower(_ value: SignatureVersion) -> RustBuffer {
    return FfiConverterTypeSignatureVersion.lower(value)
}


extension SignatureVersion: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum SigningKeyVersion {
    
    case latest
    case v1
}


#if compiler(>=6)
extension SigningKeyVersion: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSigningKeyVersion: FfiConverterRustBuffer {
    typealias SwiftType = SigningKeyVersion

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SigningKeyVersion {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .latest
        
        case 2: return .v1
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SigningKeyVersion, into buf: inout [UInt8]) {
        switch value {
        
        
        case .latest:
            writeInt(&buf, Int32(1))
        
        
        case .v1:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSigningKeyVersion_lift(_ buf: RustBuffer) throws -> SigningKeyVersion {
    return try FfiConverterTypeSigningKeyVersion.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSigningKeyVersion_lower(_ value: SigningKeyVersion) -> RustBuffer {
    return FfiConverterTypeSigningKeyVersion.lower(value)
}


extension SigningKeyVersion: Equatable, Hashable {}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionData: FfiConverterRustBuffer {
    typealias SwiftType = Data?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterData.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterData.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceData: FfiConverterRustBuffer {
    typealias SwiftType = [Data]

    public static func write(_ value: [Data], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterData.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Data] {
        let len: Int32 = try readInt(&buf)
        var seq = [Data]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterData.read(from: &buf))
        }
        return seq
    }
}
public func base64Decode(data: String)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeDevolutionsCryptoError_lift) {
    uniffi_devolutions_crypto_uniffi_fn_func_base64_decode(
        FfiConverterString.lower(data),$0
    )
})
}
public func base64DecodeUrl(data: String)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeDevolutionsCryptoError_lift) {
    uniffi_devolutions_crypto_uniffi_fn_func_base64_decode_url(
        FfiConverterString.lower(data),$0
    )
})
}
public func base64Encode(data: Data) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_devolutions_crypto_uniffi_fn_func_base64_encode(
        FfiConverterData.lower(data),$0
    )
})
}
public func base64EncodeUrl(data: Data) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_devolutions_crypto_uniffi_fn_func_base64_encode_url(
        FfiConverterData.lower(data),$0
    )
})
}
public func decrypt(data: Data, key: Data)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeDevolutionsCryptoError_lift) {
    uniffi_devolutions_crypto_uniffi_fn_func_decrypt(
        FfiConverterData.lower(data),
        FfiConverterData.lower(key),$0
    )
})
}
public func decryptAsymmetric(data: Data, key: Data)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeDevolutionsCryptoError_lift) {
    uniffi_devolutions_crypto_uniffi_fn_func_decrypt_asymmetric(
        FfiConverterData.lower(data),
        FfiConverterData.lower(key),$0
    )
})
}
public func decryptAsymmetricWithAad(data: Data, key: Data, aad: Data)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeDevolutionsCryptoError_lift) {
    uniffi_devolutions_crypto_uniffi_fn_func_decrypt_asymmetric_with_aad(
        FfiConverterData.lower(data),
        FfiConverterData.lower(key),
        FfiConverterData.lower(aad),$0
    )
})
}
public func decryptWithAad(data: Data, key: Data, aad: Data)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeDevolutionsCryptoError_lift) {
    uniffi_devolutions_crypto_uniffi_fn_func_decrypt_with_aad(
        FfiConverterData.lower(data),
        FfiConverterData.lower(key),
        FfiConverterData.lower(aad),$0
    )
})
}
public func deriveKeyArgon2(key: Data, parameters: Argon2Parameters)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeDevolutionsCryptoError_lift) {
    uniffi_devolutions_crypto_uniffi_fn_func_derive_key_argon2(
        FfiConverterData.lower(key),
        FfiConverterTypeArgon2Parameters_lower(parameters),$0
    )
})
}
public func deriveKeyPbkdf2(key: Data, salt: Data?, iterations: UInt32 = UInt32(10000), length: UInt32 = UInt32(32)) -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_devolutions_crypto_uniffi_fn_func_derive_key_pbkdf2(
        FfiConverterData.lower(key),
        FfiConverterOptionData.lower(salt),
        FfiConverterUInt32.lower(iterations),
        FfiConverterUInt32.lower(length),$0
    )
})
}
public func encrypt(data: Data, key: Data, version: CiphertextVersion = .latest)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeDevolutionsCryptoError_lift) {
    uniffi_devolutions_crypto_uniffi_fn_func_encrypt(
        FfiConverterData.lower(data),
        FfiConverterData.lower(key),
        FfiConverterTypeCiphertextVersion_lower(version),$0
    )
})
}
public func encryptAsymmetric(data: Data, key: Data, version: CiphertextVersion = .latest)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeDevolutionsCryptoError_lift) {
    uniffi_devolutions_crypto_uniffi_fn_func_encrypt_asymmetric(
        FfiConverterData.lower(data),
        FfiConverterData.lower(key),
        FfiConverterTypeCiphertextVersion_lower(version),$0
    )
})
}
public func encryptAsymmetricWithAad(data: Data, key: Data, aad: Data, version: CiphertextVersion = .latest)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeDevolutionsCryptoError_lift) {
    uniffi_devolutions_crypto_uniffi_fn_func_encrypt_asymmetric_with_aad(
        FfiConverterData.lower(data),
        FfiConverterData.lower(key),
        FfiConverterData.lower(aad),
        FfiConverterTypeCiphertextVersion_lower(version),$0
    )
})
}
public func encryptWithAad(data: Data, key: Data, aad: Data, version: CiphertextVersion = .latest)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeDevolutionsCryptoError_lift) {
    uniffi_devolutions_crypto_uniffi_fn_func_encrypt_with_aad(
        FfiConverterData.lower(data),
        FfiConverterData.lower(key),
        FfiConverterData.lower(aad),
        FfiConverterTypeCiphertextVersion_lower(version),$0
    )
})
}
public func generateKey(length: UInt32 = UInt32(32))throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeDevolutionsCryptoError_lift) {
    uniffi_devolutions_crypto_uniffi_fn_func_generate_key(
        FfiConverterUInt32.lower(length),$0
    )
})
}
public func generateKeypair(version: KeyVersion = .latest) -> KeyPair  {
    return try!  FfiConverterTypeKeyPair_lift(try! rustCall() {
    uniffi_devolutions_crypto_uniffi_fn_func_generate_keypair(
        FfiConverterTypeKeyVersion_lower(version),$0
    )
})
}
public func generateSharedKey(nShares: UInt8, threshold: UInt8, length: UInt32 = UInt32(32), version: SecretSharingVersion = .latest)throws  -> [Data]  {
    return try  FfiConverterSequenceData.lift(try rustCallWithError(FfiConverterTypeDevolutionsCryptoError_lift) {
    uniffi_devolutions_crypto_uniffi_fn_func_generate_shared_key(
        FfiConverterUInt8.lower(nShares),
        FfiConverterUInt8.lower(threshold),
        FfiConverterUInt32.lower(length),
        FfiConverterTypeSecretSharingVersion_lower(version),$0
    )
})
}
public func generateSigningKeypair(version: SigningKeyVersion = .latest) -> SigningKeyPair  {
    return try!  FfiConverterTypeSigningKeyPair_lift(try! rustCall() {
    uniffi_devolutions_crypto_uniffi_fn_func_generate_signing_keypair(
        FfiConverterTypeSigningKeyVersion_lower(version),$0
    )
})
}
public func hashPassword(password: Data, iterations: UInt32 = UInt32(10000), version: PasswordHashVersion = .latest)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeDevolutionsCryptoError_lift) {
    uniffi_devolutions_crypto_uniffi_fn_func_hash_password(
        FfiConverterData.lower(password),
        FfiConverterUInt32.lower(iterations),
        FfiConverterTypePasswordHashVersion_lower(version),$0
    )
})
}
public func joinShares(shares: [Data])throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeDevolutionsCryptoError_lift) {
    uniffi_devolutions_crypto_uniffi_fn_func_join_shares(
        FfiConverterSequenceData.lower(shares),$0
    )
})
}
public func mixKeyExchange(privateKey: Data, publicKey: Data)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeDevolutionsCryptoError_lift) {
    uniffi_devolutions_crypto_uniffi_fn_func_mix_key_exchange(
        FfiConverterData.lower(privateKey),
        FfiConverterData.lower(publicKey),$0
    )
})
}
public func sign(data: Data, keypair: Data, version: SignatureVersion = .latest)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeDevolutionsCryptoError_lift) {
    uniffi_devolutions_crypto_uniffi_fn_func_sign(
        FfiConverterData.lower(data),
        FfiConverterData.lower(keypair),
        FfiConverterTypeSignatureVersion_lower(version),$0
    )
})
}
public func validateHeader(data: Data, dataType: DataType) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_devolutions_crypto_uniffi_fn_func_validate_header(
        FfiConverterData.lower(data),
        FfiConverterTypeDataType_lower(dataType),$0
    )
})
}
public func verifyPassword(password: Data, hash: Data)throws  -> Bool  {
    return try  FfiConverterBool.lift(try rustCallWithError(FfiConverterTypeDevolutionsCryptoError_lift) {
    uniffi_devolutions_crypto_uniffi_fn_func_verify_password(
        FfiConverterData.lower(password),
        FfiConverterData.lower(hash),$0
    )
})
}
public func verifySignature(data: Data, publicKey: Data, signature: Data)throws  -> Bool  {
    return try  FfiConverterBool.lift(try rustCallWithError(FfiConverterTypeDevolutionsCryptoError_lift) {
    uniffi_devolutions_crypto_uniffi_fn_func_verify_signature(
        FfiConverterData.lower(data),
        FfiConverterData.lower(publicKey),
        FfiConverterData.lower(signature),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_devolutions_crypto_uniffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_base64_decode() != 64610) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_base64_decode_url() != 15029) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_base64_encode() != 61134) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_base64_encode_url() != 31513) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_decrypt() != 41817) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_decrypt_asymmetric() != 47124) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_decrypt_asymmetric_with_aad() != 9987) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_decrypt_with_aad() != 59734) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_derive_key_argon2() != 60451) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_derive_key_pbkdf2() != 12853) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_encrypt() != 21235) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_encrypt_asymmetric() != 16258) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_encrypt_asymmetric_with_aad() != 34280) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_encrypt_with_aad() != 56466) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_generate_key() != 6364) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_generate_keypair() != 13437) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_generate_shared_key() != 9340) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_generate_signing_keypair() != 33572) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_hash_password() != 41934) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_join_shares() != 64867) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_mix_key_exchange() != 52615) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_sign() != 54825) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_validate_header() != 50316) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_verify_password() != 39819) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_func_verify_signature() != 35870) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_method_argon2parameters_get_bytes() != 51334) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_method_argon2parametersbuilder_associated_data() != 20223) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_method_argon2parametersbuilder_build() != 6812) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_method_argon2parametersbuilder_dc_version() != 40712) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_method_argon2parametersbuilder_iterations() != 28254) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_method_argon2parametersbuilder_lanes() != 3637) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_method_argon2parametersbuilder_length() != 791) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_method_argon2parametersbuilder_memory() != 14913) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_method_argon2parametersbuilder_salt() != 59352) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_method_argon2parametersbuilder_secret_key() != 38451) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_method_argon2parametersbuilder_variant() != 50137) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_method_argon2parametersbuilder_version() != 39743) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_method_signingkeypair_get_private_key() != 10265) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_method_signingkeypair_get_public_key() != 47363) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_constructor_argon2parameters_new_from_bytes() != 3781) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_constructor_argon2parametersbuilder_new() != 19859) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_devolutions_crypto_uniffi_checksum_constructor_signingkeypair_new_from_bytes() != 17809) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureDevolutionsCryptoUniffiInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all