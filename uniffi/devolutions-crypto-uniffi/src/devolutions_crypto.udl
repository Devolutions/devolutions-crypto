enum DataType {
    "None",
    "Key",
    "Ciphertext",
    "PasswordHash",
    "Share",
    "SigningKey",
    "Signature",
};

enum CiphertextVersion {
    "Latest",
    "V1",
    "V2",
};

enum PasswordHashVersion {
    "Latest",
    "V1",
};

enum KeyVersion {
    "Latest",
    "V1",
};

enum SigningKeyVersion {
    "Latest",
    "V1",
};

enum SecretSharingVersion {
    "Latest",
    "V1",
};

enum SignatureVersion {
    "Latest",
    "V1",
};

enum Argon2Version {
    "Version10",
    "Version13",
};

enum Argon2Variant {
    "Argon2d",
    "Argon2i",
    "Argon2id",
};

[Error]
enum DevolutionsCryptoError {
    "InvalidLength",
    "InvalidKeyLength",
    "InvalidOutputLength",
    "InvalidSignature",
    "InvalidMac",
    "InvalidDataType",
    "UnknownType",
    "UnknownSubtype",
    "UnknownVersion",
    "InvalidData",
    "NullPointer",
    "CryptoError",
    "RandomError",
    "IoError",
    "NotEnoughShares",
    "InconsistentVersion",
};

interface Argon2ParametersBuilder {
        constructor();
        [Self=ByArc]
        Argon2ParametersBuilder length(u32 value);
        [Self=ByArc]
        Argon2ParametersBuilder lanes(u32 value);
        [Self=ByArc]
        Argon2ParametersBuilder memory(u32 value);
        [Self=ByArc]
        Argon2ParametersBuilder iterations(u32 value);
        [Self=ByArc]
        Argon2ParametersBuilder variant(Argon2Variant value);
        [Self=ByArc]
        Argon2ParametersBuilder version(Argon2Version value);
        [Self=ByArc]
        Argon2ParametersBuilder dc_version(u32 value);
        [Self=ByArc]
        Argon2ParametersBuilder associated_data(bytes value);
        [Self=ByArc]
        Argon2ParametersBuilder secret_key(bytes value);
        [Self=ByArc]
        Argon2ParametersBuilder salt(bytes value);
        [Self=ByArc]
        Argon2Parameters build();
};

interface Argon2Parameters {
    [Name=new_from_bytes, Throws=DevolutionsCryptoError]
    constructor([ByRef] bytes data);
    bytes get_bytes();
};

dictionary KeyPair {
    bytes public_key;
    bytes private_key;
};

interface SigningKeyPair {
    [Name=new_from_bytes, Throws=DevolutionsCryptoError]
    constructor([ByRef] bytes data);
    bytes get_public_key();
    bytes get_private_key();
};

namespace devolutions_crypto {
    // Ciphertext
    [Throws=DevolutionsCryptoError]
    bytes encrypt([ByRef] bytes data, [ByRef] bytes key, optional CiphertextVersion version = "Latest");

    [Throws=DevolutionsCryptoError]
    bytes encrypt_with_aad([ByRef] bytes data, [ByRef] bytes key, [ByRef] bytes aad, optional CiphertextVersion version = "Latest");

    [Throws=DevolutionsCryptoError]
    bytes encrypt_asymmetric([ByRef] bytes data, [ByRef] bytes key, optional CiphertextVersion version = "Latest");

    [Throws=DevolutionsCryptoError]
    bytes encrypt_asymmetric_with_aad([ByRef] bytes data, [ByRef] bytes key, [ByRef] bytes aad, optional CiphertextVersion version = "Latest");

    // Keys
    KeyPair generate_keypair(optional KeyVersion version = "Latest");

    // Password Hash
    bytes hash_password([ByRef] bytes password, optional u32 iterations = 10000, optional PasswordHashVersion version = "Latest");

    // Secret Sharing
    [Throws=DevolutionsCryptoError]
    sequence<bytes> generate_shared_key(u8 n_shares, u8 threshold, optional u32 length = 32, optional SecretSharingVersion version = "Latest");

    // Signature
    [Throws=DevolutionsCryptoError]
    bytes sign([ByRef] bytes data, [ByRef] bytes keypair, optional SignatureVersion version = "Latest");

    // Signing Key
    SigningKeyPair generate_signing_keypair(optional SigningKeyVersion version = "Latest");  
};