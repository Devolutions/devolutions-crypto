jobs:
- job: nugets_windows
  pool:
    vmImage: 'windows-latest'
  steps:
  - checkout: self
    lfs: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      addToPath: true
      architecture: 'x64'

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: "MyBuildOutputs"
      targetPath: "."

  - script: | 
      curl https://dist.nuget.org/win-x86-commandline/latest/nuget.exe --output nuget.exe
    workingDirectory: "./wrappers/csharp/nuget"
    displayName: "Downloading nuget"

  - script: |
      python GenerateNuget.py -p windows
    workingDirectory: "./wrappers/csharp/nuget"
    displayName: "Generating WIN Nuget"

  - script: |
      python GenerateNuget.py -p rdm
    workingDirectory: "./wrappers/csharp/nuget"
    displayName: "Generating WIN RDM Nuget"

  - script: |
      python GenerateNuget.py -p core
    workingDirectory: "./wrappers/csharp/nuget"
    displayName: "Generating DOTNET Nuget"

  - task: CopyFiles@2
    inputs:
      contents: 'wrappers/csharp/nuget/Windows/package/**'
      flattenFolders: true
      targetFolder: $(Build.ArtifactStagingDirectory)/general

  - task: CopyFiles@2
    inputs:
      contents: 'wrappers/csharp/nuget/dotnet-core/package/**'
      flattenFolders: true
      targetFolder: $(Build.ArtifactStagingDirectory)/general

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)/general
      artifactName: Nugets

  - task: CopyFiles@2
    inputs:
      contents: 'wrappers/csharp/nuget/rdm/package/**'
      flattenFolders: true
      targetFolder: $(Build.ArtifactStagingDirectory)/app-specific

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)/app-specific
      artifactName: AppSpecificNugets
