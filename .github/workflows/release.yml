name: Deploy to production
on:
  workflow_dispatch:
    inputs:
      publish_ios_nuget:
        description: "Publish Devolutions.Crypto.iOS.*.nupkg"
        required: true
        type: boolean
      publish_android_nuget:
        description: "Publish Devolutions.Crypto.Android.*.nupkg"
        required: true
        type: boolean
      publish_macos_full_nuget:
        description: "Publish Devolutions.Crypto.Mac.Full.*.nupkg"
        required: true
        type: boolean
      publish_macos_modern_nuget:
        description: "Publish Devolutions.Crypto.Mac.Modern.*.nupkg"
        required: true
        type: boolean
      publish_windows_nuget:
        description: "Publish Devolutions.Crypto.Windows.*.nupkg"
        required: true
        type: boolean
      publish_linux_nuget:
        description: "Publish Devolutions.Crypto.Linux.*.nupkg"
        required: true
        type: boolean
      publish_core_nuget:
        description: "Publish Devolutions.Crypto.Core.*.nupkg"
        required: true
        type: boolean
      publish_crate_rust:
        description: "Publish Rust Crate [not working yet]"
        required: true
        type: boolean
      publish_npm:
        description: "Publish NPM [not working yet]"
        required: true
        type: boolean
      publish_python:
        description: "Publish Python"
        required: true
        type: boolean
      publish_dry_run:
        description: "Dry Run Mode"
        required: true
        type: boolean
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: publish
    steps:
    - uses: actions/checkout@v3

    - name: Check out devolutions/actions
      uses: actions/checkout@v3
      with:
        path: ./.github/workflows
        ref: v1
        repository: Devolutions/actions
        token: ${{ secrets.DEVOLUTIONSBOT_TOKEN }}

    - name: Install toolbox
      uses: ./.github/workflows/toolbox-install
      with:
        github_token: ${{ secrets.DEVOLUTIONSBOT_TOKEN }}

    - name: Download Nugets Artifact
      run: dv github download-artifact nugets . devolutions-crypto
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CI: true
  
    - name: Download Python Artifact
      run: dv github download-artifact python-wheels . devolutions-crypto
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CI: true

    - name: Download NPM Artifact
      run: dv github download-artifact wasm . devolutions-crypto
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CI: true

    - name: Extract Artifacts
      run: |
        7z x nugets.zip -o ./devolutions-crypto-nugets
        7z x python-wheels.zip -o ./devolutions-crypto-wheels
        7z x wasm.zip -o ./devolutions-crypto-npm

    - name: Publish iOS NuGet
      if: ${{ inputs.publish_ios_nuget }}
      run: |
        COMMAND="dotnet nuget push ./devolutions-crypto-nugets/Devolutions.Crypto.iOS.*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json"

        if [ '${{ inputs.publish_dry_run }}' == 'true' ]; then
          echo "Dry Run : True"
        else
          echo "Dry Run : False"
        fi

        echo "Running : $COMMAND"

        if [ "${{ inputs.publish_dry_run }}" != "true" ]; then # if not dry run, actually run the command
          eval "$COMMAND"
        fi

    - name: Publish Android NuGet
      if: ${{ inputs.publish_android_nuget }}
      run: |
        COMMAND="dotnet nuget push ./devolutions-crypto-nugets/Devolutions.Crypto.Android.*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json"

        if [ '${{ inputs.publish_dry_run }}' == 'true' ]; then
          echo "Dry Run : True"
        else
          echo "Dry Run : False"
        fi

        echo "Running : $COMMAND"

        if [ "${{ inputs.publish_dry_run }}" != "true" ]; then # if not dry run, actually run the command
          eval "$COMMAND"
        fi

    - name: Publish Mac Full NuGet
      if: ${{ inputs.publish_macos_full_nuget }}
      run: |
        COMMAND="dotnet nuget push ./devolutions-crypto-nugets/Devolutions.Crypto.Mac.Full.*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json"

        if [ '${{ inputs.publish_dry_run }}' == 'true' ]; then
          echo "Dry Run : True"
        else
          echo "Dry Run : False"
        fi

        echo "Running : $COMMAND"

        if [ "${{ inputs.publish_dry_run }}" != "true" ]; then # if not dry run, actually run the command
          eval "$COMMAND"
        fi

    - name: Publish Mac Modern NuGet
      if: ${{ inputs.publish_macos_modern_nuget }}
      run: |
        COMMAND="dotnet nuget push ./devolutions-crypto-nugets/Devolutions.Crypto.Mac.Modern.*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json"

        if [ '${{ inputs.publish_dry_run }}' == 'true' ]; then
          echo "Dry Run : True"
        else
          echo "Dry Run : False"
        fi

        echo "Running : $COMMAND"

        if [ "${{ inputs.publish_dry_run }}" != "true" ]; then # if not dry run, actually run the command
          eval "$COMMAND"
        fi

    - name: Publish Windows NuGet
      if: ${{ inputs.publish_windows_nuget }}
      run: |
        COMMAND="dotnet nuget push ./devolutions-crypto-nugets/Devolutions.Crypto.Windows.*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json"

        if [ '${{ inputs.publish_dry_run }}' == 'true' ]; then
          echo "Dry Run : True"
        else
          echo "Dry Run : False"
        fi

        echo "Running : $COMMAND"

        if [ "${{ inputs.publish_dry_run }}" != "true" ]; then # if not dry run, actually run the command
          eval "$COMMAND"
        fi

    - name: Publish Linux NuGet
      if: ${{ inputs.publish_linux_nuget }}
      run: |
        COMMAND="dotnet nuget push ./devolutions-crypto-nugets/Devolutions.Crypto.Linux.*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json"

        if [ '${{ inputs.publish_dry_run }}' == 'true' ]; then
          echo "Dry Run : True"
        else
          echo "Dry Run : False"
        fi

        echo "Running : $COMMAND"

        if [ "${{ inputs.publish_dry_run }}" != "true" ]; then # if not dry run, actually run the command
          eval "$COMMAND"
        fi

    - name: Publish Core NuGet
      if: ${{ inputs.publish_core_nuget }}
      run: |
        COMMAND="dotnet nuget push ./devolutions-crypto-nugets/Devolutions.Crypto.Core.*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json"

        if [ '${{ inputs.publish_dry_run }}' == 'true' ]; then
          echo "Dry Run : True"
        else
          echo "Dry Run : False"
        fi

        echo "Running : $COMMAND"

        if [ "${{ inputs.publish_dry_run }}" != "true" ]; then # if not dry run, actually run the command
          eval "$COMMAND"
        fi

    - name: Publish Rust Crate
      if: ${{ inputs.publish_crate_rust }}
      working-directory: ./devolutions-crypto
      run: |
        if [ '${{ inputs.publish_dry_run }}' == 'true' ]; then
          cargo publish --dry-run
        else
          cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
        fi

    - name: Publish NPM
      if: ${{ inputs.publish_npm }}
      working-directory: ./devolutions-crypto-npm/bundler
      run: |
        npm set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}

        if [ '${{ inputs.publish_dry_run }}' == 'true' ]; then
          npm publish --access=public --dry-run
        else
          npm publish --access=public
        fi

    - name: Publish Python
      if: ${{ inputs.publish_npm }}
      run: |
        pip install twine

        if [ '${{ inputs.publish_dry_run }}' == 'true' ]; then
          twine upload --verbose  --repository testpypi -u "__token__" -p ${{ secrets.TESTPYPI_OWNER_API_KEY  }} ./devolutions-crypto-wheels/*
        else
          twine upload --verbose -u "__token__" -p ${{ secrets.PYPI_OWNER_API_KEY }} ./devolutions-crypto-wheels/*
        fi
