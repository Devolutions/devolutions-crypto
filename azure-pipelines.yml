name: devolutions-crypto-$(Rev:r)

trigger:
  branches:
    include:
      - master

stages:
- stage: Native_Build
  jobs:
  - job: Linux
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        sudo apt update
        sudo apt install nuget
        sudo apt install gcc-multilib
      displayName: "Installing dependencies"

    - script: |
        rustup update

        rustup target add x86_64-unknown-linux-gnu
        rustup target add i686-unknown-linux-gnu

        rustup target add aarch64-linux-android
        rustup target add armv7-linux-androideabi
        rustup target add i686-linux-android
        rustup target add x86_64-linux-android

        mkdir .cargo
      displayName: "Install rust"
            
    - script: |
        cargo test
      workingDirectory: "./devolutionscrypto"
      displayName: "Unit tests"  

    - script: |
        python3 GeneratePackage.py LINUX
      workingDirectory: "./wrappers/csharp"
      displayName: "Building Linux"

    - script: |
        export ANDROID_HOME=/usr/local/lib/android/sdk        
        export NDK_HOME=$ANDROID_HOME/ndk-bundle

        echo "[target.aarch64-linux-android]
        ar = \"$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-ar\"
        linker = \"$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android26-clang\"
        [target.armv7-linux-androideabi]
        ar = \"$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/arm-linux-androideabi-ar\"
        linker = \"$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi26-clang\"
        [target.i686-linux-android]
        ar = \"$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android-ar\"
        linker = \"$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android26-clang\"
        [target.x86_64-linux-android]
        ar = \"$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android-ar\"
        linker = \"$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android26-clang\"" >> ./.cargo/config

    - script: |
        export ANDROID_HOME=/usr/local/lib/android/sdk        
        export NDK_HOME=$ANDROID_HOME/ndk-bundle

        python3 GeneratePackage.py ANDROID
      workingDirectory: "./wrappers/csharp"
      displayName: "Building Android"

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/android/**'
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/linux/**'
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: MyBuildOutputs

  - job: macOS
    pool: 'Devolutions - macOS'

    steps:
    - script: cargo test
      workingDirectory: "./devolutionscrypto"
      displayName: "Unit tests"

    - script: python3 GeneratePackage.py MAC
      workingDirectory: "./wrappers/csharp"
      displayName: "Building Mac"
      env:
        PATH: /Users/_admin/.cargo/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Frameworks/Mono.framework/Versions/Current/Commands

    - script: python3 GeneratePackage.py IOS
      workingDirectory: "./wrappers/csharp"
      displayName: "Building IOS"
      env:
        PATH: /Users/_admin/.cargo/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Frameworks/Mono.framework/Versions/Current/Commands

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/macos/**'
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/ios/**'
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: MyBuildOutputs

  - job: Windows
    pool:
      vmImage: 'windows-latest'
    steps:
    - checkout: self
      lfs: true
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true
        architecture: 'x64'

    - powershell: |
        set PATH="%PATH%;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\Roslyn"
        echo "##vso[task.setvariable variable=PATH;]%PATH%;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\Roslyn"

    - script: |
        curl -sSf -o rustup-init.exe https://win.rustup.rs
        rustup-init.exe -y --default-toolchain stable
        set PATH=%PATH%;%USERPROFILE%\.cargo\bin
        echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
      displayName: "Install rust (windows)"

    - script: |
        rustup target add x86_64-pc-windows-msvc
        rustup target add i686-pc-windows-msvc
      displayName: "Installing rust targets"

    - script: |
        cargo test
      workingDirectory: "./devolutionscrypto"
      displayName: "Unit tests"

    - script: |
        python GeneratePackage.py WIN
      workingDirectory: "./wrappers/csharp"
      displayName: "Building WIN"

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/windows/**'
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: MyBuildOutputs

- stage: Nugets
  jobs:
  - job: Linux
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: "MyBuildOutputs"
        targetPath: "."
    
    - script: |
        sudo apt install nuget
      displayName: "Install nuget"

    - script: |
        python3 GenerateNuget.py LINUX
      workingDirectory: "./wrappers/csharp/nuget"
      displayName: "Generating Linux Nuget"

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/nuget/Linux/package/**'
        flattenFolders: true
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: Nugets

  - job: macOS
    pool: 'Devolutions - macOS'
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: "MyBuildOutputs"
        targetPath: "."

    - script: |
        python3 GenerateNuget.py IOS
      workingDirectory: "./wrappers/csharp/nuget"
      displayName: "Generating IOS Nuget"
      env:
        PATH: /Users/_admin/.cargo/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Frameworks/Mono.framework/Versions/Current/Commands

    - script: |
        python3 GenerateNuget.py MAC-MODERN
      workingDirectory: "./wrappers/csharp/nuget"
      displayName: "Generating MAC-MODERN Nuget"
      env:
        PATH: /Users/_admin/.cargo/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Frameworks/Mono.framework/Versions/Current/Commands

    - script: |
        python3 GenerateNuget.py MAC-FULL
      workingDirectory: "./wrappers/csharp/nuget"
      displayName: "Generating MAC-FULL Nuget"
      env:
        PATH: /Users/_admin/.cargo/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Frameworks/Mono.framework/Versions/Current/Commands

    - script: |
        python3 GenerateNuget.py ANDROID
      workingDirectory: "./wrappers/csharp/nuget"
      displayName: "Generating Android Nuget"
      env:
        PATH: /Users/_admin/.cargo/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Frameworks/Mono.framework/Versions/Current/Commands
    

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/nuget/iOS/Devolutions.Crypto.iOS/package/**'
        flattenFolders: true
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/nuget/macOS/Full/package/**'
        flattenFolders: true
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/nuget/macOS/Modern/Devolutions.Crypto.Mac/package/**'
        flattenFolders: true
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/nuget/Android/Devolutions.Crypto.Android/package/**'
        flattenFolders: true
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: Nugets


  - job: Windows
    pool:
      vmImage: 'windows-latest'
    steps:
    - checkout: self
      lfs: true
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true
        architecture: 'x64'

    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: "MyBuildOutputs"
        targetPath: "."

    - script: | 
        curl https://dist.nuget.org/win-x86-commandline/latest/nuget.exe --output nuget.exe
      workingDirectory: "./wrappers/csharp/nuget"
      displayName: "Downloading nuget"

    - script: |
        python GenerateNuget.py WIN
      workingDirectory: "./wrappers/csharp/nuget"
      displayName: "Generating WIN Nuget"

    - script: |
        python GenerateNuget.py DOTNET
      workingDirectory: "./wrappers/csharp/nuget"
      displayName: "Generating DOTNET Nuget"

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/nuget/Windows/package/**'
        flattenFolders: true
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/nuget/dotnet-core/package/**'
        flattenFolders: true
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: Nugets

- stage: WebAssembly
  jobs:
  - job: safari_unit_tests
    pool:
      vmImage: 'Devolutions - macOS'
    steps:
    
    - script: |
        rustup update

        cargo install wasm-pack
      displayName: "Update rust and install wasm-pack"

    - script: |
        wasm-pack test --node
        wasm-pack test --safari --headless
      workingDirectory: "./devolutionscrypto"
      displayName: "Unit tests"


  - job: Linux
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    
    - script: |
        rustup update

        cargo install wasm-pack
      displayName: "Update rust and install wasm-pack"

    - script: |
        wasm-pack test --node
        wasm-pack test --firefox --headless
        wasm-pack test --chrome --headless
      workingDirectory: "./devolutionscrypto"
      displayName: "Unit tests"

    - script: |
        sh ./wasm_build.sh
      workingDirectory: "./wrappers/wasm"
      displayName: "Generating npm package"

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/wasm/pkg/**'
        flattenFolders: true
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: WebAssembly
