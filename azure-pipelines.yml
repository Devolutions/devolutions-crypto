trigger:
- master

pr:
- master

stages:

- stage: Source_Publishing
  dependsOn: [] 
  jobs:
  - job: Linux
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: |
          **/*
          !.git/**/*
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: Source

- stage: RustCodeFormattingCheck
  dependsOn: [] 
  jobs:
  - job: Linux
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.7'

    - script: |
        rustup update

        mkdir .cargo
      displayName: "Install rust"

    - script: |
        cargo fmt --all -- --check
      workingDirectory: "./devolutions-crypto"
      displayName: "Check Format"

    - script: |
        cargo clippy -- --D warnings
      workingDirectory: "./devolutions-crypto"
      displayName: "Check Clippy"

- stage: CsharpCodeFormattingCheck
  dependsOn: [] 
  jobs:
  - job: Windows
    pool:
      vmImage: 'windows-latest'
    steps:
    - checkout: self
      lfs: true

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true
        architecture: 'x64'

    - bash: |
        echo "##vso[task.prependpath]c:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\Roslyn"        
        echo "##vso[task.prependpath]c:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin"
      displayName: "Setting up PATH environment variable"

    - script: |
        rustup update
        rustup target add x86_64-pc-windows-msvc
        rustup target add i686-pc-windows-msvc
      displayName: "Installing rust targets"

    - script: |
        python GeneratePackage.py -p windows
      workingDirectory: "./wrappers/csharp"
      displayName: "Building Windows"

    - script: | 
        msbuild dotnet-framework.sln /t:restore,clean,build /p:TreatWarningsAsErrors=True;RunCodeAnalysis=true
      workingDirectory: "./wrappers/csharp/tests/unit-tests/manual/dotnet-framework"
      displayName: "Code Analysis"

- stage: Native_Build
  dependsOn: []
  jobs:
  - job: Linux
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.7'
    - script: |
        sudo apt update
        sudo apt install nuget gcc-multilib software-properties-common
      displayName: "Installing dependencies"

    - script: |
        rustup update

        rustup target add x86_64-unknown-linux-gnu
        rustup target add i686-unknown-linux-gnu

        rustup target add aarch64-linux-android
        rustup target add armv7-linux-androideabi
        rustup target add i686-linux-android
        rustup target add x86_64-linux-android

        mkdir .cargo
      displayName: "Install rust"
            
    - script: |
        cargo test
      workingDirectory: "./devolutions-crypto"
      displayName: "Unit tests"  

    - script: |
        python GeneratePackage.py -p linux
      workingDirectory: "./wrappers/csharp"
      displayName: "Building Linux"

    - script: |
        export ANDROID_HOME=/usr/local/lib/android/sdk        
        export NDK_HOME=$ANDROID_HOME/ndk-bundle

        echo "[target.aarch64-linux-android]
        ar = \"$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-ar\"
        linker = \"$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang\"
        [target.armv7-linux-androideabi]
        ar = \"$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/arm-linux-androideabi-ar\"
        linker = \"$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi16-clang\"
        [target.i686-linux-android]
        ar = \"$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android-ar\"
        linker = \"$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android16-clang\"
        [target.x86_64-linux-android]
        ar = \"$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android-ar\"
        linker = \"$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang\"" >> ./.cargo/config

    - script: |
        export ANDROID_HOME=/usr/local/lib/android/sdk        
        export NDK_HOME=$ANDROID_HOME/ndk-bundle

        python GeneratePackage.py -p android
      workingDirectory: "./wrappers/csharp"
      displayName: "Building Android"

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/android/**'
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/linux/**'
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: MyBuildOutputs

  - job: macOS
    pool:
      vmImage: 'macOS-latest'
    steps:

    - script: |
        set -e
        curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable
        echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
        source $HOME/.cargo/env

        rustup target add x86_64-apple-darwin

        rustup target add aarch64-apple-ios
        rustup target add x86_64-apple-ios
      displayName: "Install rust"

    - script: |
        source $HOME/.cargo/env
        cargo test
      workingDirectory: "./devolutions-crypto"
      displayName: "Unit tests"

    - script: |
        source $HOME/.cargo/env
        
        python3 GeneratePackage.py -p mac
      workingDirectory: "./wrappers/csharp"
      displayName: "Building Mac Full"

    - script: |
        source $HOME/.cargo/env
        
        python3 GeneratePackage.py -p mac-modern
      workingDirectory: "./wrappers/csharp"
      displayName: "Building Mac Modern"

    - script: |
        source $HOME/.cargo/env

        python3 GeneratePackage.py -p ios
      workingDirectory: "./wrappers/csharp"
      displayName: "Building IOS"

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/macos-full/**'
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/macos-modern/**'
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/ios/**'
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: MyBuildOutputs

  - job: Windows
    pool:
      vmImage: 'windows-latest'
    steps:
    - checkout: self
      lfs: true
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true
        architecture: 'x64'

    - bash: |
        echo "##vso[task.prependpath]c:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\Roslyn"
      displayName: "Setting up PATH environment variable"

    - script: |
        rustup update
        rustup target add x86_64-pc-windows-msvc
        rustup target add i686-pc-windows-msvc
      displayName: "Installing rust targets"

    - script: |
        cargo test
      workingDirectory: "./devolutions-crypto"
      displayName: "Unit tests"

    - script: |
        python GeneratePackage.py -p windows
      workingDirectory: "./wrappers/csharp"
      displayName: "Building WIN"

    - script: |
        python GeneratePackage.py -p windows --rdm
      workingDirectory: "./wrappers/csharp"
      displayName: "Building WIN"

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/windows/**'
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/rdm/**'
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: MyBuildOutputs

- stage: Nugets
  dependsOn: Native_Build
  jobs:
  - job: Linux
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: "MyBuildOutputs"
        targetPath: "."
    
    - script: |
        sudo apt install nuget
      displayName: "Install nuget"

    - script: |
        python3 GenerateNuget.py -p linux
      workingDirectory: "./wrappers/csharp/nuget"
      displayName: "Generating Linux Nuget"

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/nuget/Linux/package/**'
        flattenFolders: true
        targetFolder: $(Build.ArtifactStagingDirectory)/general

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)/general
        artifactName: Nugets

  - job: macOS
    pool:
      vmImage: 'macOS-latest'
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: "MyBuildOutputs"
        targetPath: "."
    - script: |
        sudo nuget update -self
      displayName: "Update Nuget"

    - script: |
        python3 GenerateNuget.py -p ios
      workingDirectory: "./wrappers/csharp/nuget"
      displayName: "Generating IOS Nuget"

    - script: |
        python3 GenerateNuget.py -p mac-modern
      workingDirectory: "./wrappers/csharp/nuget"
      displayName: "Generating MAC-MODERN Nuget"

    - script: |
        python3 GenerateNuget.py -p mac
      workingDirectory: "./wrappers/csharp/nuget"
      displayName: "Generating MAC-FULL Nuget"

    - script: |
        python3 GenerateNuget.py -p android
      workingDirectory: "./wrappers/csharp/nuget"
      displayName: "Generating Android Nuget"
    

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/nuget/iOS/Devolutions.Crypto.iOS/package/**'
        flattenFolders: true
        targetFolder: $(Build.ArtifactStagingDirectory)/general

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/nuget/macOS/Full/package/**'
        flattenFolders: true
        targetFolder: $(Build.ArtifactStagingDirectory)/general

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/nuget/macOS/Modern/Devolutions.Crypto.Mac/package/**'
        flattenFolders: true
        targetFolder: $(Build.ArtifactStagingDirectory)/general

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/nuget/Android/Devolutions.Crypto.Android/package/**'
        flattenFolders: true
        targetFolder: $(Build.ArtifactStagingDirectory)/general

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)/general
        artifactName: Nugets


  - job: Windows
    pool:
      vmImage: 'windows-latest'
    steps:
    - checkout: self
      lfs: true
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true
        architecture: 'x64'

    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: "MyBuildOutputs"
        targetPath: "."

    - script: | 
        curl https://dist.nuget.org/win-x86-commandline/latest/nuget.exe --output nuget.exe
      workingDirectory: "./wrappers/csharp/nuget"
      displayName: "Downloading nuget"

    - script: |
        python GenerateNuget.py -p windows
      workingDirectory: "./wrappers/csharp/nuget"
      displayName: "Generating WIN Nuget"

    - script: |
        python GenerateNuget.py -p rdm
      workingDirectory: "./wrappers/csharp/nuget"
      displayName: "Generating WIN RDM Nuget"

    - script: |
        python GenerateNuget.py -p core
      workingDirectory: "./wrappers/csharp/nuget"
      displayName: "Generating DOTNET Nuget"

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/nuget/Windows/package/**'
        flattenFolders: true
        targetFolder: $(Build.ArtifactStagingDirectory)/general

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/nuget/dotnet-core/package/**'
        flattenFolders: true
        targetFolder: $(Build.ArtifactStagingDirectory)/general

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)/general
        artifactName: Nugets

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/csharp/nuget/rdm/package/**'
        flattenFolders: true
        targetFolder: $(Build.ArtifactStagingDirectory)/app-specific

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)/app-specific
        artifactName: AppSpecificNugets

- stage: WebAssembly
  dependsOn: []
  jobs:
  - job: safari_unit_tests
    pool:
      vmImage: 'macOS-latest'
    steps:
    - script: |
        set -e
        curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable
        echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
        source $HOME/.cargo/env
        cargo install wasm-pack
      displayName: "install rust"
    - script: |
        sudo npm i -g n
        sudo n stable
        sudo npm update -g npm

        wasm-pack test --safari --headless
      workingDirectory: "./devolutions-crypto"
      displayName: "Unit tests"

  - job: Linux
    pool:
      vmImage: 'ubuntu-latest'
    steps:    
    - script: |
        rustup update

        cargo install wasm-pack
      displayName: "Update rust and install wasm-pack"

    - script: |
        wasm-pack test --firefox --headless
        wasm-pack test --chrome --headless
      workingDirectory: "./devolutions-crypto"
      displayName: "Platform tests"

    - script: |
        sh ./wasm_build.sh
      workingDirectory: "./wrappers/wasm"
      displayName: "Generating npm package"

    - script: |
        npm install
        npm test
      workingDirectory: "./wrappers/wasm/tests"
      displayName: "Integration tests"

    - task: CopyFiles@2
      inputs:
        contents: 'wrappers/wasm/dist/**'
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: WebAssembly

- stage: CSharpUnitTests
  dependsOn: Nugets
  jobs: 
  - job: Windows
    pool:
      vmImage: 'windows-latest'
    steps:
      - checkout: self
        lfs: true
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.x'
          addToPath: true
          architecture: 'x64'
          
      - task: DownloadPipelineArtifact@2
        inputs:
          artifact: "Nugets"
          targetPath: "./wrappers/csharp/tests/unit-tests/nugets/Nugets"

      - bash: |
          echo "##vso[task.prependpath]c:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin"
          echo "##vso[task.prependpath]c:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TestWindow"
        displayName: "setting up PATH environment variable"

      - script: | 
          curl https://dist.nuget.org/win-x86-commandline/latest/nuget.exe --output nuget.exe
        workingDirectory: "./wrappers/csharp/tests/unit-tests/nugets"
        displayName: "Downloading nuget"

      - script: |
          python unit-tests.py -p framework
        workingDirectory: "./wrappers/csharp/tests/unit-tests/nugets"
        displayName: "Unit tests DOTNET FRAMEWORK PACKAGE CONFIG"
      
      - script: |
          python unit-tests.py -p core
        workingDirectory: "./wrappers/csharp/tests/unit-tests/nugets"
        displayName: "Unit tests DOTNET CORE"

  - job: Linux
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self
        lfs: true
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.x'
          addToPath: true
          architecture: 'x64'

      - task: DownloadPipelineArtifact@2
        inputs:
          artifact: "Nugets"
          targetPath: "./wrappers/csharp/tests/unit-tests/nugets/Nugets"

      - script: |
          sudo apt install nuget
        displayName: "Install nuget"

      - script: |
          python unit-tests.py -p core
        workingDirectory: "./wrappers/csharp/tests/unit-tests/nugets"
        displayName: "Unit tests DOTNET CORE"

  - job: macOS
    pool:
      vmImage: 'macOS-latest'
    steps:
    - checkout: self
      lfs: true
      submodules: true
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: "Nugets"
        targetPath: "./wrappers/csharp/tests/unit-tests/nugets/Nugets"
    - script: |
        sudo nuget update -self
      displayName: "Update Nuget"

    - script: | # Fix issue with azure pipeline without the right default Xcode View github actions/virtual-environment issue 775
        echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_11.4.app;
        sudo xcode-select --switch /Applications/Xcode_11.4.app/Contents/Developer

    - script: |
        python3 unit-tests.py -p core
      workingDirectory: "./wrappers/csharp/tests/unit-tests/nugets"
      displayName: "Unit tests DOTNET CORE"

    - script: |
        python3 unit-tests.py -p mac
      workingDirectory: "./wrappers/csharp/tests/unit-tests/nugets"
      displayName: "Unit tests XAMARIN-MAC-FULL"

    - script: |
        python3 unit-tests.py -p mac-modern
      workingDirectory: "./wrappers/csharp/tests/unit-tests/nugets"
      displayName: "Unit tests XAMARIN-MAC-MODERN"


  - job: ios
    pool:
      vmImage: 'macOS-latest'
    steps:
    - checkout: self
      lfs: true
      submodules: true
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: "Nugets"
        targetPath: "./wrappers/csharp/tests/unit-tests/nugets/Nugets"
    - script: |
        sudo nuget update -self
      displayName: "Update Nuget"

    - script: | # Fix issue with azure pipeline without the right default Xcode View github actions/virtual-environment issue 775
        echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_11.4.app;
        sudo xcode-select --switch /Applications/Xcode_11.4.app/Contents/Developer

    - script: |
        python3 unit-tests.py -p ios
      workingDirectory: "./wrappers/csharp/tests/unit-tests/nugets"
      displayName: "Unit tests XAMARIN-IOS"

  - job: android
    pool:
      vmImage: 'macOS-latest'
    steps:
    - checkout: self
      lfs: true
      submodules: true
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: "Nugets"
        targetPath: "./wrappers/csharp/tests/unit-tests/nugets/Nugets"
    - script: |
        sudo nuget update -self
      displayName: "Update Nuget"

    - script: | # Fix issue with azure pipeline without the right default Xcode View github actions/virtual-environment issue 775
        echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_11.4.app;
        sudo xcode-select --switch /Applications/Xcode_11.4.app/Contents/Developer

    - script: |
        adb start-server
      displayName: "Starting ADB Server"
      
    - script: |
        /Users/runner/Library/Android/sdk/tools/bin/sdkmanager "system-images;android-29;google_apis;x86_64"
      displayName: "Installing SDK Android-29 x86_64"
      
    - script: |
        echo "no" | /Users/runner/Library/Android/sdk/tools/bin/avdmanager create avd --force -n test_64 -k "system-images;android-29;google_apis;x86_64"
      displayName: "Creating Android device"

    - script: |
        emulator @test_64 &       
      
      workingDirectory: "/Users/runner/Library/Android/sdk/tools/"
      displayName: "Starting emulator"
      
    - script: |
        adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'
      displayName: "Waiting for emulator to boot"
      
    - script: |
        python3 unit-tests.py -p android
      workingDirectory: "./wrappers/csharp/tests/unit-tests/nugets"
      displayName: "Unit tests XAMARIN-ANDROID"


- stage: CSharpIntegrationTests
  dependsOn: Nugets
  jobs:
  - job: macOS
    pool:
      vmImage: 'macOS-latest'
    steps:
    - checkout: self
      lfs: true
      submodules: true
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: "Nugets"
        targetPath: "./wrappers/csharp/tests/integration-tests/nugets/Nugets"
    - script: |
        sudo nuget update -self
      displayName: "Update Nuget"

    - script: | # Fix issue with azure pipeline without the right default Xcode View github actions/virtual-environment issue 775
        echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_11.4.app;
        sudo xcode-select --switch /Applications/Xcode_11.4.app/Contents/Developer

    - script: |
        set -e
        curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable
        echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
        source $HOME/.cargo/env

        rustup target add x86_64-apple-ios
      displayName: "Install rust"

    - script: |
        python3 integration-tests.py -p ios
      workingDirectory: "./wrappers/csharp/tests/integration-tests/nugets"
      displayName: "Integration tests XAMARIN IOS"
    