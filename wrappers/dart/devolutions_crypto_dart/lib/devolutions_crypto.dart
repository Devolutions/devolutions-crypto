// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
//
// Common helper code.
//
// Ideally this would live in a separate .dart file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the rust component. The easiest way to ensure this is to bundle the Python
// helpers directly inline like we're doing here.

import 'dart:ffi';
import 'package:ffi/ffi.dart';
import 'dart:io';
import 'dart:async';
import 'package:mutex/mutex.dart';
import 'dart:typed_data';

// Used for default argument values
//_DEFAULT = object()


final class _UniffiRustBuffer extends Struct {
  @Uint32()
  external int capacity;

  @Uint32()
  external int len;

  external Pointer<Utf8> data;

  _UniffiRustBufferBuilder get buffer => _UniffiRustBufferBuilder.fromStrData(data, len);
}

//class _UniffiForeignBytes(ctypes.Structure):
//    _fields_ = [
//        ("len", ctypes.c_int32),
//        ("data", ctypes.POINTER(ctypes.c_char)),
//    ]
//
//    def __str__(self):
//        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])
//
//
//class _UniffiRustBufferStream {
// Pointer<Uint8> pointer;
// int length;
//
// _UniffiRustBufferStream(this.pointer, this.length);
//
//}
//    """
//    Helper for structured reading of bytes from a _UniffiRustBuffer
//    """
//
//    def __init__(self, data, len):
//        self.data = data
//        self.len = len
//        self.offset = 0
//
//    @classmethod
//    def from_rust_buffer(cls, buf):
//        return cls(buf.data, buf.len)
//
//    def remaining(self):
//        return self.len - self.offset
//
//    def _unpack_from(self, size, format):
//        if self.offset + size > self.len:
//            raise InternalError("read past end of rust buffer")
//        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
//        self.offset += size
//        return value
//
//    def read(self, size):
//        if self.offset + size > self.len:
//            raise InternalError("read past end of rust buffer")
//        data = self.data[self.offset:self.offset+size]
//        self.offset += size
//        return data
//
//    def read_i8(self):
//        return self._unpack_from(1, ">b")
//
//    def read_u8(self):
//        return self._unpack_from(1, ">B")
//
//    def read_i16(self):
//        return self._unpack_from(2, ">h")
//
//    def read_u16(self):
//        return self._unpack_from(2, ">H")
//
//    def read_i32(self):
//        return self._unpack_from(4, ">i")
//
//    def read_u32(self):
//        return self._unpack_from(4, ">I")
//
//    def read_i64(self):
//        return self._unpack_from(8, ">q")
//
//    def read_u64(self):
//        return self._unpack_from(8, ">Q")
//
//    def read_float(self):
//        v = self._unpack_from(4, ">f")
//        return v
//
//    def read_double(self):
//        return self._unpack_from(8, ">d")
//
//    def read_c_size_t(self):
//        return self._unpack_from(ctypes.sizeof(ctypes.c_size_t) , "@N")
//
class _UniffiRustBufferBuilder {

  late ByteData buffer;
  late int len;
  int offset = 0;

  _UniffiRustBufferBuilder([int len = 16]) {
    this.offset = 0;
    this.buffer = ByteData(len);
    this.len = len;
  }

  _UniffiRustBufferBuilder.fromData(Pointer<Uint8> data, int len) {
    this.offset = 0;
    this.len = len;
    this.buffer = data.asTypedList(len).buffer.asByteData(0);
  }

  _UniffiRustBufferBuilder.fromStrData(Pointer<Utf8> data, int len) {
    this.offset = 0;
    this.len = len;
    this.buffer = data.cast<Uint8>().asTypedList(len).buffer.asByteData(0);
  }

  int get length => offset;

  Pointer<Utf8> toNativeUtf8() {
    final uint8List = buffer.buffer.asUint8List();
    final result = calloc<Uint8>(this.offset);
  
    for (var i = 0; i < this.offset; ++i) {
      result[i] = uint8List[i];
    }
  
    return result.cast<Utf8>();
  }

  String toDartString(int? size) {
    int end = len;
    if (size != null) {
      end = offset + size;
      if (end > len) {
        throw "Longer than string";
      }
    }

    var sublist = Uint8List.sublistView(buffer, offset, end);

    offset = end;
    return String.fromCharCodes(sublist);
  
  }

  _unpack() {

  }

  read_u8() {
    if (this.offset + 1 > this.len) {
      throw "Not enough bytes.";
    }
    var retVal = buffer.getUint8(this.offset);
    this.offset += 1;
    return retVal;
  }

  write_u8(value) {
    if (this.offset + 1 > this.len) {
      throw "Not enough bytes.";
    }
    buffer.setUint8(this.offset, value);
    this.offset += 1;
  }

  read_i32() {
    if (this.offset + 4 > this.len) {
      throw "Not enough bytes.";
    }
    var retVal = buffer.getInt32(this.offset, Endian.big);
    this.offset += 4;
    return retVal;
  }

  write_i32(value) {
    if (this.offset + 4 > this.len) {
      throw "Not enough bytes.";
    }
    buffer.setInt32(this.offset, value, Endian.big);
    this.offset += 4;
  }

  read_u16() {
    if (this.offset + 2 > this.len) {
      throw "Not enough bytes.";
    }
    var retVal = buffer.getUint16(this.offset, Endian.big);
    this.offset += 2;
    return retVal;
  }

  write_u16(value) {
    if (this.offset + 2 > this.len) {
      throw "Not enough bytes.";
    }
    buffer.setUint16(this.offset, value, Endian.big);
    this.offset += 2;
  }

  read_u32() {
    if (this.offset + 4 > this.len) {
      throw "Not enough bytes.";
    }
    var retVal = buffer.getUint32(this.offset, Endian.big);
    this.offset += 4;
    return retVal;
  }

  read_u64() {
    if (this.offset + 8 > this.len) {
      throw "Not enough bytes.";
    }
    var retVal = buffer.getUint64(this.offset, Endian.big);
    this.offset += 8;
    return retVal;
  }

  read_i64() {
    if (this.offset + 8 > this.len) {
      throw "Not enough bytes.";
    }
    var retVal = buffer.getInt64(this.offset, Endian.big);
    this.offset += 8;
    return retVal;
  }

  read_double() {
    if (this.offset + 8 > this.len) {
      throw "Not enough bytes.";
    }
    var retVal = buffer.getFloat64(this.offset, Endian.big);
    this.offset += 8;
    return retVal;
  }
}
//    """
//    Helper for structured writing of bytes into a _UniffiRustBuffer.
//    """
//
//    def __init__(self):
//        self.rbuf = _UniffiRustBuffer.alloc(16)
//        self.rbuf.len = 0
//
//    def finalize(self):
//        rbuf = self.rbuf
//        self.rbuf = None
//        return rbuf
//
//    def discard(self):
//        if self.rbuf is not None:
//            rbuf = self.finalize()
//            rbuf.free()
//
//    @contextlib.contextmanager
//    def _reserve(self, num_bytes):
//        if self.rbuf.len + num_bytes > self.rbuf.capacity:
//            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
//        yield None
//        self.rbuf.len += num_bytes
//
//    def _pack_into(self, size, format, value):
//        with self._reserve(size):
//            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
//            for i, byte in enumerate(struct.pack(format, value)):
//                self.rbuf.data[self.rbuf.len + i] = byte
//
//    def write(self, value):
//        with self._reserve(len(value)):
//            for i, byte in enumerate(value):
//                self.rbuf.data[self.rbuf.len + i] = byte
//
//    def write_i8(self, v):
//        self._pack_into(1, ">b", v)
//
//    def write_u8(self, v):
//        self._pack_into(1, ">B", v)
//
//    def write_i16(self, v):
//        self._pack_into(2, ">h", v)
//
//    def write_u16(self, v):
//        self._pack_into(2, ">H", v)
//
//    def write_i32(self, v):
//        self._pack_into(4, ">i", v)
//
//    def write_u32(self, v):
//        self._pack_into(4, ">I", v)
//
//    def write_i64(self, v):
//        self._pack_into(8, ">q", v)
//
//    def write_u64(self, v):
//        self._pack_into(8, ">Q", v)
//
//    def write_float(self, v):
//        self._pack_into(4, ">f", v)
//
//    def write_double(self, v):
//        self._pack_into(8, ">d", v)
//
//    def write_c_size_t(self, v):
//        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

final class _UniffiRustCallStatus extends Struct {
  @Uint8()
  external int code;

  external _UniffiRustBuffer error_buf;
}



enum RUST_CALL_STATUS { CALL_SUCCESS, CALL_ERROR, CALL_PANIC }


// This is just a wrapper
_rustCall(fn, rustCallStatus) {
  return _rustCallWithError(null, fn, rustCallStatus);
}

// This is just a wrapper
_rustCallWithError(_UniffiWithError? error, fn, Pointer<_UniffiRustCallStatus> rustCallStatus) {
  var fnResult = fn();

  _rustCallCheckStatus(error, rustCallStatus);

  calloc.free(rustCallStatus);
  return fnResult;
}

void _rustCallCheckStatus(_UniffiWithError? error, Pointer<_UniffiRustCallStatus> rustCallStatus) {
  if (rustCallStatus.ref.code == RUST_CALL_STATUS.CALL_SUCCESS.index) {
    return;
  } else if (rustCallStatus.ref.code == RUST_CALL_STATUS.CALL_ERROR.index) {
    if(error == null) {
      throw 'CALL_ERROR but error converter is null.';
    } else {
      throw error.toError(rustCallStatus);
    }
  } else if (rustCallStatus.ref.code == RUST_CALL_STATUS.CALL_PANIC.index) {
    throw 'Panic: Rust Panic: ${rustCallStatus.ref.error_buf.data.toDartString()}';
  } else {
    throw 'PANIC: rustCallStatus.ref.code undefined value: ${rustCallStatus.ref.code}';
  }
}

//class InternalError(Exception):
//    pass
//
//class _UniffiRustCallStatus(ctypes.Structure):
//    """
//    Error runtime.
//    """
//    _fields_ = [
//        ("code", ctypes.c_int8),
//        ("error_buf", _UniffiRustBuffer),
//    ]
//
//    # These match the values from the uniffi::rustcalls module
//    CALL_SUCCESS = 0
//    CALL_ERROR = 1
//    CALL_PANIC = 2
//
//    def __str__(self):
//        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
//            return "_UniffiRustCallStatus(CALL_SUCCESS)"
//        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
//            return "_UniffiRustCallStatus(CALL_ERROR)"
//        elif self.code == _UniffiRustCallStatus.CALL_PANIC:
//            return "_UniffiRustCallStatus(CALL_PANIC)"
//        else:
//            return "_UniffiRustCallStatus(<invalid code>)"
//
//def _rust_call(fn, *args):
//    # Call a rust function
//    return _rust_call_with_error(None, fn, *args)
//
//def _rust_call_with_error(error_ffi_converter, fn, *args):
//    # Call a rust function and handle any errors
//    #
//    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
//    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
//    call_status = _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer(0, 0, None))
//
//    args_with_error = args + (ctypes.byref(call_status),)
//    result = fn(*args_with_error)
//    _uniffi_check_call_status(error_ffi_converter, call_status)
//    return result
//
//def _uniffi_check_call_status(error_ffi_converter, call_status):
//    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
//        pass
//    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
//        if error_ffi_converter is None:
//            call_status.error_buf.free()
//            raise InternalError("_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
//        else:
//            raise error_ffi_converter.lift(call_status.error_buf)
//    elif call_status.code == _UniffiRustCallStatus.CALL_PANIC:
//        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
//        # with the message.  But if that code panics, then it just sends back
//        # an empty buffer.
//        if call_status.error_buf.len > 0:
//            msg = _UniffiConverterString.lift(call_status.error_buf)
//        else:
//            msg = "Unknown rust panic"
//        raise InternalError(msg)
//    else:
//        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
//            call_status.code))
//
//# A function pointer for a callback as defined by UniFFI.
//# Rust definition `fn(handle: u64, method: u32, args: _UniffiRustBuffer, buf_ptr: *mut _UniffiRustBuffer) -> int`
//_UNIFFI_FOREIGN_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_ulonglong, ctypes.c_ulong, ctypes.POINTER(ctypes.c_char), ctypes.c_int, ctypes.POINTER(_UniffiRustBuffer))
//
//# UniFFI future continuation
//_UNIFFI_FUTURE_CONTINUATION_T = ctypes.CFUNCTYPE(None, ctypes.c_size_t, ctypes.c_int8)
//
// Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive {
    static check(value) {
        return true;
    }

    lift(value) {
        return value;
    }

    lower(value) {
        return value;
    }
}

class _UniffiConverterPrimitiveInt extends _UniffiConverterPrimitive {
    //@classmethod
    //def check(cls, value):
    //    try:
    //        value = value.__index__()
    //    except Exception:
    //        raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
    //    if not isinstance(value, int):
    //        raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
    //    if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
    //        raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))
    //    return super().check(value)

    static write_unchecked(value, buf) {
        return value;
    }
}

class _UniffiConverterPrimitiveFloat extends _UniffiConverterPrimitive {
    //@classmethod
    //def check(cls, value):
    //    try:
    //        value = value.__float__()
    //    except Exception:
    //        raise TypeError("must be real number, not {}".format(type(value).__name__))
    //    if not isinstance(value, float):
    //        raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))
    //    return super().check(value)

    static write_unchecked(value, buf) {
        return value;
    }
}

// Helper class for wrapper types that will always go through a _UniffiRustBuffer.
// Classes should inherit from this and implement the `read` and `write` static methods.
abstract interface class _UniffiConverterRustBuffer<T> {

    Pointer<_UniffiRustBuffer>? _rustBuffer;

    T lift(_UniffiRustBuffer buf) {
        return read(buf.buffer);
    }

    _UniffiRustBuffer lower(T value) {

      var bufferBuilder = _UniffiRustBufferBuilder();
      write(bufferBuilder, value);

      _rustBuffer = calloc<_UniffiRustBuffer >();
      _rustBuffer!.ref
        ..capacity = bufferBuilder.length
        ..len = bufferBuilder.length
        ..data = bufferBuilder.toNativeUtf8();

      return _rustBuffer!.ref;
    }

    T read(_UniffiRustBufferBuilder buf);

    write(_UniffiRustBufferBuilder buf, T value);

    void dispose() {
        if (_rustBuffer != null) {
            calloc.free(this._rustBuffer!);
        }
    }
}

class _UniffiWithError {
    static _UniffiRustBuffer lift(Pointer<_UniffiRustCallStatus> val) {
      return val.ref.error_buf;
    }

    @override
    liftNotStatic(Pointer<_UniffiRustCallStatus> buf) {
      return lift(buf);
    }

    toError(Pointer<_UniffiRustCallStatus> val) {
    }
  static read(_UniffiRustBuffer buf) {
     return buf;
  }
}

// Contains loading, initialization code, and the FFI Function declarations.
//# Define some ctypes FFI types that we use in the library
//
//"""
//ctypes type for the foreign executor callback.  This is a built-in interface for scheduling
//tasks
//
//Args:
//  executor: opaque c_size_t value representing the eventloop
//  delay: delay in ms
//  task: function pointer to the task callback
//  task_data: void pointer to the task callback data
//
//Normally we should call task(task_data) after the detail.
//However, when task is NULL this indicates that Rust has dropped the ForeignExecutor and we should
//decrease the EventLoop refcount.
//"""
//_UNIFFI_FOREIGN_EXECUTOR_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int8, ctypes.c_size_t, ctypes.c_uint32, ctypes.c_void_p, ctypes.c_void_p)
//
//"""
//Function pointer for a Rust task, which a callback function that takes a opaque pointer
//"""
//_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)
//
//def _uniffi_future_callback_t(return_type):
//    """
//    Factory function to create callback function types for async functions
//    """
//    return ctypes.CFUNCTYPE(None, ctypes.c_size_t, return_type, _UniffiRustCallStatus)
//
//def _uniffi_load_indirect():
//    """
//    This is how we find and load the dynamic library provided by the component.
//    For now we just look it up by name.
//    """
//    if sys.platform == "darwin":
//        libname = "lib{}.dylib"
//    elif sys.platform.startswith("win"):
//        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
//        # We could use `os.add_dll_directory` to configure the search path, but
//        # it doesn't feel right to mess with application-wide settings. Let's
//        # assume that the `.dll` is next to the `.py` file and load by full path.
//        libname = os.path.join(
//            os.path.dirname(__file__),
//            "{}.dll",
//        )
//    else:
//        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
//        libname = "lib{}.so"
//
//    libname = libname.format("uniffi_devolutions_crypto")
//    path = os.path.join(os.path.dirname(__file__), libname)
//    lib = ctypes.cdll.LoadLibrary(path)
//    return lib

DynamicLibrary _uniffiLoadDynamicLibrary() {

  final path = Platform.isWindows ? "libuniffi_devolutions_crypto.dll" : "libuniffi_devolutions_crypto.so";
  var lib = Platform.isIOS
      ? DynamicLibrary.process()
      : Platform.isMacOS
          ? DynamicLibrary.executable()
          : DynamicLibrary.open(path);

  _uniffi_check_contract_api_version(lib);

  return lib;
}

final _uniffiLib = _uniffiLoadDynamicLibrary();
//
_uniffi_check_contract_api_version(DynamicLibrary lib) {

  _UniffiLib_ffi_devolutions_crypto_uniffi_dart_uniffi_contract_version_d contractFunc = lib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_uniffi_contract_version_c>>('ffi_devolutions_crypto_uniffi_dart_uniffi_contract_version').asFunction();

  // Get the bindings contract version from our ComponentInterface
  var bindings_contract_version = 24;
  // Get the scaffolding contract version by calling the into the dylib
  var scaffolding_contract_version = contractFunc();

  if (bindings_contract_version != scaffolding_contract_version) {
    throw "UniFFI contract version mismatch: try cleaning and rebuilding your project";
  }
}
//
//def _uniffi_check_api_checksums(lib):
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt() != 55904:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_asymmetric() != 15240:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_asymmetric_with_aad() != 1857:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_with_aad() != 45000:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_keypair() != 18544:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_shared_key() != 50867:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_signing_keypair() != 55208:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_hash_password() != 10906:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_sign() != 41188:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_decode() != 56702:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_decode_url() != 9630:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_encode() != 50003:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_encode_url() != 52047:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt() != 21256:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_asymmetric() != 36047:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_asymmetric_with_aad() != 40151:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_with_aad() != 3739:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_derive_key_argon2() != 18583:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_derive_key_pbkdf2() != 31088:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_key() != 48512:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_join_shares() != 35818:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_mix_key_exchange() != 42430:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_validate_header() != 36935:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_verify_password() != 43457:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_func_verify_signature() != 36969:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parameters_get_bytes() != 41797:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_associated_data() != 52063:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_build() != 35155:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_dc_version() != 43928:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_iterations() != 26358:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_lanes() != 35813:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_length() != 29728:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_memory() != 54738:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_salt() != 60249:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_secret_key() != 42733:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_variant() != 44924:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_version() != 19643:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_method_signingkeypair_get_private_key() != 59578:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_method_signingkeypair_get_public_key() != 54920:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_constructor_argon2parameters_new_from_bytes() != 13354:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_constructor_argon2parametersbuilder_new() != 13663:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//    if lib.uniffi_devolutions_crypto_uniffi_dart_checksum_constructor_signingkeypair_new_from_bytes() != 64102:
//        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
//
//
//# A ctypes library to expose the extern-C FFI definitions.
//# This is an implementation detail which will be called internally by the public API.
//

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_free_argon2parameters_c = Void Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_free_argon2parameters_d = void Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_free_argon2parameters_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_free_argon2parameters_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_free_argon2parameters_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_free_argon2parameters').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_constructor_argon2parameters_new_from_bytes_c = Pointer Function(
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_constructor_argon2parameters_new_from_bytes_d = Pointer Function(
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_constructor_argon2parameters_new_from_bytes_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_constructor_argon2parameters_new_from_bytes_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_constructor_argon2parameters_new_from_bytes_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_constructor_argon2parameters_new_from_bytes').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parameters_get_bytes_c = _UniffiRustBuffer Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parameters_get_bytes_d = _UniffiRustBuffer Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parameters_get_bytes_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parameters_get_bytes_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parameters_get_bytes_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parameters_get_bytes').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_free_argon2parametersbuilder_c = Void Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_free_argon2parametersbuilder_d = void Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_free_argon2parametersbuilder_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_free_argon2parametersbuilder_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_free_argon2parametersbuilder_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_free_argon2parametersbuilder').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_constructor_argon2parametersbuilder_new_c = Pointer Function(
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_constructor_argon2parametersbuilder_new_d = Pointer Function(
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_constructor_argon2parametersbuilder_new_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_constructor_argon2parametersbuilder_new_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_constructor_argon2parametersbuilder_new_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_constructor_argon2parametersbuilder_new').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_associated_data_c = Pointer Function(
    Pointer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_associated_data_d = Pointer Function(
    Pointer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_associated_data_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_associated_data_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_associated_data_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_associated_data').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_build_c = Pointer Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_build_d = Pointer Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_build_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_build_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_build_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_build').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_dc_version_c = Pointer Function(
    Pointer,
    Uint32,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_dc_version_d = Pointer Function(
    Pointer,
    int,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_dc_version_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_dc_version_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_dc_version_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_dc_version').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_iterations_c = Pointer Function(
    Pointer,
    Uint32,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_iterations_d = Pointer Function(
    Pointer,
    int,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_iterations_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_iterations_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_iterations_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_iterations').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_lanes_c = Pointer Function(
    Pointer,
    Uint32,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_lanes_d = Pointer Function(
    Pointer,
    int,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_lanes_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_lanes_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_lanes_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_lanes').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_length_c = Pointer Function(
    Pointer,
    Uint32,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_length_d = Pointer Function(
    Pointer,
    int,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_length_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_length_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_length_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_length').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_memory_c = Pointer Function(
    Pointer,
    Uint32,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_memory_d = Pointer Function(
    Pointer,
    int,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_memory_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_memory_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_memory_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_memory').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_salt_c = Pointer Function(
    Pointer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_salt_d = Pointer Function(
    Pointer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_salt_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_salt_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_salt_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_salt').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_secret_key_c = Pointer Function(
    Pointer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_secret_key_d = Pointer Function(
    Pointer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_secret_key_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_secret_key_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_secret_key_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_secret_key').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_variant_c = Pointer Function(
    Pointer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_variant_d = Pointer Function(
    Pointer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_variant_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_variant_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_variant_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_variant').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_version_c = Pointer Function(
    Pointer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_version_d = Pointer Function(
    Pointer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_version_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_version_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_version_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_version').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_free_signingkeypair_c = Void Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_free_signingkeypair_d = void Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_free_signingkeypair_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_free_signingkeypair_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_free_signingkeypair_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_free_signingkeypair').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_constructor_signingkeypair_new_from_bytes_c = Pointer Function(
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_constructor_signingkeypair_new_from_bytes_d = Pointer Function(
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_constructor_signingkeypair_new_from_bytes_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_constructor_signingkeypair_new_from_bytes_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_constructor_signingkeypair_new_from_bytes_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_constructor_signingkeypair_new_from_bytes').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_signingkeypair_get_private_key_c = _UniffiRustBuffer Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_signingkeypair_get_private_key_d = _UniffiRustBuffer Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_signingkeypair_get_private_key_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_signingkeypair_get_private_key_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_signingkeypair_get_private_key_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_method_signingkeypair_get_private_key').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_signingkeypair_get_public_key_c = _UniffiRustBuffer Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_signingkeypair_get_public_key_d = _UniffiRustBuffer Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_signingkeypair_get_public_key_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_signingkeypair_get_public_key_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_signingkeypair_get_public_key_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_method_signingkeypair_get_public_key').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_c = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_d = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_asymmetric_c = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_asymmetric_d = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_asymmetric_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_asymmetric_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_asymmetric_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_asymmetric').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_asymmetric_with_aad_c = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_asymmetric_with_aad_d = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_asymmetric_with_aad_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_asymmetric_with_aad_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_asymmetric_with_aad_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_asymmetric_with_aad').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_with_aad_c = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_with_aad_d = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_with_aad_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_with_aad_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_with_aad_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_with_aad').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_keypair_c = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_keypair_d = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_keypair_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_keypair_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_keypair_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_keypair').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_shared_key_c = _UniffiRustBuffer Function(
    Uint8,
    Uint8,
    Uint32,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_shared_key_d = _UniffiRustBuffer Function(
    int,
    int,
    int,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_shared_key_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_shared_key_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_shared_key_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_shared_key').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_signing_keypair_c = Pointer Function(
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_signing_keypair_d = Pointer Function(
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_signing_keypair_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_signing_keypair_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_signing_keypair_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_signing_keypair').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_hash_password_c = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    Uint32,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_hash_password_d = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    int,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_hash_password_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_hash_password_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_hash_password_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_hash_password').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_sign_c = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_sign_d = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_sign_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_sign_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_sign_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_sign').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_decode_c = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_decode_d = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_decode_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_decode_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_decode_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_decode').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_decode_url_c = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_decode_url_d = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_decode_url_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_decode_url_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_decode_url_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_decode_url').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_encode_c = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_encode_d = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_encode_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_encode_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_encode_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_encode').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_encode_url_c = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_encode_url_d = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_encode_url_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_encode_url_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_encode_url_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_encode_url').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_c = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_d = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_asymmetric_c = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_asymmetric_d = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_asymmetric_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_asymmetric_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_asymmetric_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_asymmetric').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_asymmetric_with_aad_c = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_asymmetric_with_aad_d = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_asymmetric_with_aad_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_asymmetric_with_aad_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_asymmetric_with_aad_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_asymmetric_with_aad').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_with_aad_c = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_with_aad_d = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_with_aad_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_with_aad_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_with_aad_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_with_aad').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_derive_key_argon2_c = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_derive_key_argon2_d = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_derive_key_argon2_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_derive_key_argon2_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_derive_key_argon2_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_derive_key_argon2').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_derive_key_pbkdf2_c = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Uint32,
    Uint32,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_derive_key_pbkdf2_d = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    int,
    int,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_derive_key_pbkdf2_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_derive_key_pbkdf2_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_derive_key_pbkdf2_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_derive_key_pbkdf2').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_key_c = _UniffiRustBuffer Function(
    Uint32,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_key_d = _UniffiRustBuffer Function(
    int,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_key_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_key_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_key_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_key').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_join_shares_c = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_join_shares_d = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_join_shares_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_join_shares_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_join_shares_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_join_shares').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_mix_key_exchange_c = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_mix_key_exchange_d = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_mix_key_exchange_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_mix_key_exchange_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_mix_key_exchange_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_mix_key_exchange').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_validate_header_c = Int8 Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_validate_header_d = int Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_validate_header_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_validate_header_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_validate_header_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_validate_header').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_verify_password_c = Int8 Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_verify_password_d = int Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_verify_password_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_verify_password_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_verify_password_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_verify_password').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_verify_signature_c = Int8 Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_verify_signature_d = int Function(
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_verify_signature_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_verify_signature_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_verify_signature_c>>('uniffi_devolutions_crypto_uniffi_dart_fn_func_verify_signature').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rustbuffer_alloc_c = _UniffiRustBuffer Function(
    Int32,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rustbuffer_alloc_d = _UniffiRustBuffer Function(
    int,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rustbuffer_alloc_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rustbuffer_alloc_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rustbuffer_alloc_c>>('ffi_devolutions_crypto_uniffi_dart_rustbuffer_alloc').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rustbuffer_from_bytes_c = _UniffiRustBuffer Function(
    Pointer<_UniffiRustCallStatus>,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rustbuffer_from_bytes_d = _UniffiRustBuffer Function(
    Pointer<_UniffiRustCallStatus>,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rustbuffer_from_bytes_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rustbuffer_from_bytes_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rustbuffer_from_bytes_c>>('ffi_devolutions_crypto_uniffi_dart_rustbuffer_from_bytes').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rustbuffer_free_c = Void Function(
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rustbuffer_free_d = void Function(
    _UniffiRustBuffer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rustbuffer_free_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rustbuffer_free_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rustbuffer_free_c>>('ffi_devolutions_crypto_uniffi_dart_rustbuffer_free').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rustbuffer_reserve_c = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    Int32,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rustbuffer_reserve_d = _UniffiRustBuffer Function(
    _UniffiRustBuffer,
    int,
    Pointer<_UniffiRustCallStatus>,
);

typedef _continationCallbackTypedef = Void Function(Int32 ptr, Int32 i);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rustbuffer_reserve_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rustbuffer_reserve_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rustbuffer_reserve_c>>('ffi_devolutions_crypto_uniffi_dart_rustbuffer_reserve').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_continuation_callback_set_c = Void Function(
    Pointer<NativeFunction<_continationCallbackTypedef>>,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_continuation_callback_set_d = void Function(
    Pointer<NativeFunction<_continationCallbackTypedef>>,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_continuation_callback_set_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_continuation_callback_set_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_continuation_callback_set_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_continuation_callback_set').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u8_c = Void Function(
    Pointer,
    Size,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u8_d = void Function(
    Pointer,
    int,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u8_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u8_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u8_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u8').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u8_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u8_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u8_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u8_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u8_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u8').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_u8_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_u8_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_u8_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_u8_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_u8_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_free_u8').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u8_c = Uint8 Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u8_d = int Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u8_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u8_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u8_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u8').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i8_c = Void Function(
    Pointer,
    Size,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i8_d = void Function(
    Pointer,
    int,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i8_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i8_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i8_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i8').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i8_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i8_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i8_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i8_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i8_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i8').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_i8_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_i8_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_i8_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_i8_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_i8_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_free_i8').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i8_c = Int8 Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i8_d = int Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i8_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i8_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i8_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i8').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u16_c = Void Function(
    Pointer,
    Size,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u16_d = void Function(
    Pointer,
    int,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u16_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u16_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u16_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u16').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u16_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u16_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u16_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u16_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u16_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u16').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_u16_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_u16_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_u16_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_u16_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_u16_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_free_u16').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u16_c = Uint16 Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u16_d = int Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u16_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u16_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u16_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u16').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i16_c = Void Function(
    Pointer,
    Size,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i16_d = void Function(
    Pointer,
    int,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i16_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i16_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i16_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i16').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i16_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i16_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i16_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i16_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i16_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i16').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_i16_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_i16_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_i16_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_i16_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_i16_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_free_i16').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i16_c = Int16 Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i16_d = int Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i16_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i16_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i16_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i16').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u32_c = Void Function(
    Pointer,
    Size,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u32_d = void Function(
    Pointer,
    int,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u32_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u32_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u32_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u32').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u32_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u32_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u32_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u32_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u32_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u32').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_u32_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_u32_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_u32_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_u32_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_u32_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_free_u32').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u32_c = Uint32 Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u32_d = int Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u32_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u32_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u32_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u32').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i32_c = Void Function(
    Pointer,
    Size,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i32_d = void Function(
    Pointer,
    int,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i32_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i32_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i32_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i32').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i32_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i32_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i32_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i32_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i32_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i32').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_i32_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_i32_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_i32_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_i32_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_i32_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_free_i32').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i32_c = Int32 Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i32_d = int Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i32_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i32_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i32_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i32').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u64_c = Void Function(
    Pointer,
    Size,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u64_d = void Function(
    Pointer,
    int,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u64_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u64_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u64_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_poll_u64').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u64_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u64_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u64_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u64_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u64_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_u64').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_u64_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_u64_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_u64_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_u64_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_u64_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_free_u64').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u64_c = Uint64 Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u64_d = int Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u64_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u64_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u64_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_complete_u64').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i64_c = Void Function(
    Pointer,
    Size,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i64_d = void Function(
    Pointer,
    int,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i64_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i64_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i64_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_poll_i64').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i64_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i64_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i64_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i64_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i64_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_i64').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_i64_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_i64_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_i64_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_i64_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_i64_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_free_i64').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i64_c = Int64 Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i64_d = int Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i64_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i64_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i64_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_complete_i64').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_f32_c = Void Function(
    Pointer,
    Size,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_f32_d = void Function(
    Pointer,
    int,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_f32_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_f32_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_f32_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_poll_f32').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_f32_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_f32_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_f32_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_f32_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_f32_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_f32').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_f32_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_f32_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_f32_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_f32_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_f32_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_free_f32').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_f32_c = Float Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_f32_d = double Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_f32_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_f32_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_f32_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_complete_f32').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_f64_c = Void Function(
    Pointer,
    Size,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_f64_d = void Function(
    Pointer,
    int,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_f64_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_f64_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_f64_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_poll_f64').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_f64_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_f64_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_f64_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_f64_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_f64_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_f64').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_f64_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_f64_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_f64_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_f64_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_f64_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_free_f64').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_f64_c = Double Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_f64_d = double Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_f64_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_f64_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_f64_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_complete_f64').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_pointer_c = Void Function(
    Pointer,
    Size,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_pointer_d = void Function(
    Pointer,
    int,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_pointer_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_pointer_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_pointer_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_poll_pointer').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_pointer_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_pointer_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_pointer_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_pointer_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_pointer_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_pointer').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_pointer_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_pointer_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_pointer_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_pointer_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_pointer_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_free_pointer').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_pointer_c = Pointer Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_pointer_d = Pointer Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_pointer_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_pointer_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_pointer_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_complete_pointer').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_rust_buffer_c = Void Function(
    Pointer,
    Size,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_rust_buffer_d = void Function(
    Pointer,
    int,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_rust_buffer_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_rust_buffer_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_rust_buffer_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_poll_rust_buffer').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_rust_buffer_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_rust_buffer_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_rust_buffer_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_rust_buffer_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_rust_buffer_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_rust_buffer').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_rust_buffer_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_rust_buffer_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_rust_buffer_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_rust_buffer_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_rust_buffer_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_free_rust_buffer').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_rust_buffer_c = _UniffiRustBuffer Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_rust_buffer_d = _UniffiRustBuffer Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_rust_buffer_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_rust_buffer_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_rust_buffer_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_complete_rust_buffer').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_void_c = Void Function(
    Pointer,
    Size,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_void_d = void Function(
    Pointer,
    int,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_void_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_void_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_poll_void_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_poll_void').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_void_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_void_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_void_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_void_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_void_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_cancel_void').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_void_c = Void Function(
    Pointer,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_void_d = void Function(
    Pointer,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_void_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_void_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_free_void_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_free_void').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_void_c = Void Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_void_d = void Function(
    Pointer,
    Pointer<_UniffiRustCallStatus>,
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_void_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_void_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_rust_future_complete_void_c>>('ffi_devolutions_crypto_uniffi_dart_rust_future_complete_void').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_asymmetric_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_asymmetric_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_asymmetric_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_asymmetric_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_asymmetric_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_asymmetric').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_asymmetric_with_aad_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_asymmetric_with_aad_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_asymmetric_with_aad_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_asymmetric_with_aad_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_asymmetric_with_aad_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_asymmetric_with_aad').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_with_aad_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_with_aad_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_with_aad_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_with_aad_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_with_aad_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_encrypt_with_aad').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_keypair_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_keypair_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_keypair_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_keypair_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_keypair_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_keypair').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_shared_key_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_shared_key_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_shared_key_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_shared_key_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_shared_key_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_shared_key').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_signing_keypair_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_signing_keypair_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_signing_keypair_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_signing_keypair_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_signing_keypair_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_signing_keypair').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_hash_password_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_hash_password_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_hash_password_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_hash_password_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_hash_password_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_hash_password').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_sign_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_sign_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_sign_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_sign_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_sign_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_sign').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_decode_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_decode_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_decode_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_decode_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_decode_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_decode').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_decode_url_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_decode_url_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_decode_url_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_decode_url_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_decode_url_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_decode_url').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_encode_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_encode_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_encode_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_encode_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_encode_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_encode').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_encode_url_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_encode_url_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_encode_url_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_encode_url_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_encode_url_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_base64_encode_url').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_asymmetric_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_asymmetric_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_asymmetric_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_asymmetric_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_asymmetric_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_asymmetric').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_asymmetric_with_aad_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_asymmetric_with_aad_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_asymmetric_with_aad_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_asymmetric_with_aad_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_asymmetric_with_aad_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_asymmetric_with_aad').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_with_aad_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_with_aad_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_with_aad_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_with_aad_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_with_aad_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_decrypt_with_aad').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_derive_key_argon2_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_derive_key_argon2_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_derive_key_argon2_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_derive_key_argon2_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_derive_key_argon2_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_derive_key_argon2').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_derive_key_pbkdf2_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_derive_key_pbkdf2_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_derive_key_pbkdf2_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_derive_key_pbkdf2_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_derive_key_pbkdf2_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_derive_key_pbkdf2').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_key_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_key_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_key_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_key_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_key_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_generate_key').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_join_shares_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_join_shares_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_join_shares_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_join_shares_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_join_shares_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_join_shares').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_mix_key_exchange_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_mix_key_exchange_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_mix_key_exchange_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_mix_key_exchange_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_mix_key_exchange_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_mix_key_exchange').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_validate_header_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_validate_header_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_validate_header_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_validate_header_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_validate_header_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_validate_header').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_verify_password_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_verify_password_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_verify_password_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_verify_password_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_verify_password_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_verify_password').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_verify_signature_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_verify_signature_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_verify_signature_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_verify_signature_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_func_verify_signature_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_func_verify_signature').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parameters_get_bytes_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parameters_get_bytes_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parameters_get_bytes_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parameters_get_bytes_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parameters_get_bytes_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parameters_get_bytes').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_associated_data_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_associated_data_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_associated_data_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_associated_data_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_associated_data_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_associated_data').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_build_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_build_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_build_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_build_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_build_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_build').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_dc_version_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_dc_version_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_dc_version_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_dc_version_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_dc_version_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_dc_version').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_iterations_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_iterations_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_iterations_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_iterations_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_iterations_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_iterations').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_lanes_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_lanes_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_lanes_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_lanes_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_lanes_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_lanes').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_length_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_length_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_length_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_length_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_length_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_length').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_memory_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_memory_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_memory_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_memory_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_memory_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_memory').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_salt_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_salt_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_salt_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_salt_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_salt_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_salt').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_secret_key_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_secret_key_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_secret_key_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_secret_key_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_secret_key_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_secret_key').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_variant_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_variant_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_variant_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_variant_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_variant_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_variant').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_version_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_version_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_version_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_version_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_version_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_method_argon2parametersbuilder_version').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_signingkeypair_get_private_key_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_signingkeypair_get_private_key_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_signingkeypair_get_private_key_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_signingkeypair_get_private_key_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_signingkeypair_get_private_key_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_method_signingkeypair_get_private_key').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_signingkeypair_get_public_key_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_signingkeypair_get_public_key_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_signingkeypair_get_public_key_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_signingkeypair_get_public_key_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_method_signingkeypair_get_public_key_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_method_signingkeypair_get_public_key').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_constructor_argon2parameters_new_from_bytes_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_constructor_argon2parameters_new_from_bytes_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_constructor_argon2parameters_new_from_bytes_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_constructor_argon2parameters_new_from_bytes_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_constructor_argon2parameters_new_from_bytes_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_constructor_argon2parameters_new_from_bytes').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_constructor_argon2parametersbuilder_new_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_constructor_argon2parametersbuilder_new_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_constructor_argon2parametersbuilder_new_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_constructor_argon2parametersbuilder_new_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_constructor_argon2parametersbuilder_new_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_constructor_argon2parametersbuilder_new').asFunction();

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_constructor_signingkeypair_new_from_bytes_c = Uint16 Function(
);

typedef _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_constructor_signingkeypair_new_from_bytes_d = int Function(
);

final _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_constructor_signingkeypair_new_from_bytes_d _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_constructor_signingkeypair_new_from_bytes_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_uniffi_devolutions_crypto_uniffi_dart_checksum_constructor_signingkeypair_new_from_bytes_c>>('uniffi_devolutions_crypto_uniffi_dart_checksum_constructor_signingkeypair_new_from_bytes').asFunction();

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_uniffi_contract_version_c = Uint32 Function(
);

typedef _UniffiLib_ffi_devolutions_crypto_uniffi_dart_uniffi_contract_version_d = int Function(
);

final _UniffiLib_ffi_devolutions_crypto_uniffi_dart_uniffi_contract_version_d _UniffiLib_ffi_devolutions_crypto_uniffi_dart_uniffi_contract_version_func = _uniffiLib.lookup<NativeFunction<_UniffiLib_ffi_devolutions_crypto_uniffi_dart_uniffi_contract_version_c>>('ffi_devolutions_crypto_uniffi_dart_uniffi_contract_version').asFunction();

////_uniffi_check_contract_api_version(_UniffiLib)
//_uniffi_check_api_checksums(_UniffiLib)

// Public interface members begin here.


class _UniffiConverterUInt8 extends _UniffiConverterPrimitiveInt {


    int read(_UniffiRustBufferBuilder buf) {
        return buf.read_u8();
    }

    _UniffiRustBufferBuilder write(int value) {
        //buf.data.cast<Int16> = value;
        Pointer<_UniffiRustBuffer> _rustBuffer = calloc<_UniffiRustBuffer >();
        return _rustBuffer.ref.buffer;
    }
}

class _UniffiConverterUInt32 extends _UniffiConverterPrimitiveInt {


    int read(_UniffiRustBufferBuilder buf) {
        return buf.read_u32();
    }

    _UniffiRustBufferBuilder write(int value) {
        //buf.data.cast<Int16> = value;
        Pointer<_UniffiRustBuffer> _rustBuffer = calloc<_UniffiRustBuffer >();
        return _rustBuffer.ref.buffer;
    }
}

class _UniffiConverterBool extends _UniffiConverterPrimitive {

    @override
    bool read(buf) {
        return lift(buf.read_u8());
    }

    @override
    _UniffiRustBufferBuilder write(bool value, _UniffiRustBufferBuilder buf) {
      if(value) {
        return buf.write_u8(1);
      } else {
        return buf.write_u8(0);
      }
    }

    @override
    bool lift(dynamic value) {
        return value != 0;
    }
    //bool read(_UniffiRustBufferBuilder buf) {
    //    return buf.read_u8() == 1;
    //}

    //_UniffiRustBufferBuilder write(bool value) {
    //    Pointer<_UniffiRustBuffer> _rustBuffer = calloc<_UniffiRustBuffer >();
    //    return _rustBuffer.ref.buffer;
    //    //buf.data.cast<Double> = value;
    //}
}

class _UniffiConverterString {

    late Pointer<_UniffiRustBuffer> _pointer;

    static check(value) {
        /*if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value*/
    }

    String lift(_UniffiRustBuffer buf) {
      return buf.data.toDartString();
    }

    _UniffiRustBuffer lower(String value) {

      _pointer = calloc<_UniffiRustBuffer>();
      _pointer.ref
        ..capacity = value.length
        ..len = value.length
        ..data = value.toNativeUtf8();

      return _pointer.ref;
    }



    @override
    void dispose() {
        if (_pointer != null) {
            calloc.free(this._pointer);
        }
    }

    read(_UniffiRustBufferBuilder buf) {
      var size = buf.read_i32();
      if (size < 0) {
          throw "Negative string length";
      }
      return buf.toDartString(size);
      //return utf8_bytes.decode("utf-8")
    }

    _UniffiRustBufferBuilder write(String value, _UniffiRustBufferBuilder buf) {
      return buf;
    }
}

class _UniffiConverterBytes extends _UniffiConverterRustBuffer {


    write(_UniffiRustBufferBuilder buf, value){
      return buf;
    }

    @override
    read(_UniffiRustBufferBuilder buf) {
     return buf;
  }
}



// Generated by Protocol
abstract class Argon2ParametersProtocol<T> {
    get_bytes() {
        throw UnimplementedError('get_bytes not implemented.');
    }
}

// Generated By: ObjectTemplate:1
class Argon2Parameters {
    //late Argon2Parameters _pointer;
    late Pointer _pointer;
    Pointer get pointer => _pointer;

    Argon2Parameters.fromPointer(Pointer _pointer) {
        this._pointer = _pointer;
    }

    @override
    void dispose() {
        // In case of partial initialization of instances.
        if (_pointer != null) {
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
            _rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_free_argon2parameters_func(_pointer, _rustCallStatus), _rustCallStatus);
        }
    }

    /*static new_from_bytes(List<int> data) {
    //
    
    //    // Call the (fallible) function before creating any half-baked object instances.
    //    this._pointer = _rustCallWithError(_UniffiConverterTypeDevolutionsCryptoError(),() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_constructor_argon2parameters_new_from_bytes_func(
        _UniffiConverterBytes().lower(data),
    notimpl),
    notimpl
);
    //    return make_instance_(_pointer):// TODO
    //}*/


    // method: 2
    List<int> get_bytes() {
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
        return _UniffiConverterBytes().lift(
            _rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parameters_get_bytes_func(_pointer,
    _rustCallStatus),
    _rustCallStatus
)
        );
    }




}

// Generated By: ObjectTemplate:2
class _UniffiConverterTypeArgon2Parameters {

    Argon2Parameters lift(Pointer _pointer) {
      // TODO: Do something with value?
      return Argon2Parameters.fromPointer(_pointer);
    }

    Pointer lower(Argon2Parameters value) {
      return value.pointer;
    }

    /*
    static Argon2ParametersProtocol lower(Argon2Parameters value) {
        //if not isinstance(value, Argon2Parameters):
        //    raise TypeError("Expected Argon2Parameters instance, {} found".format(type(value).__name__))
        //return value._pointer
        return Argon2ParametersProtocol();
    }*/

    read(_UniffiRustBufferBuilder buf) {
        var ptr = buf.read_i64();
        if (ptr == 0) {
            throw 'Issue with pointer'; 
        }
        return _UniffiConverterTypeArgon2Parameters().lift(Pointer.fromAddress(ptr));
    }

    _UniffiRustBufferBuilder write(_UniffiRustBufferBuilder buf, value) {
      //buf.write_u64(cls.lower(value)) 
        Pointer<_UniffiRustBuffer> _rustBuffer = calloc<_UniffiRustBuffer >();
        return _rustBuffer.ref.buffer;
    }
}



// Generated by Protocol
abstract class Argon2ParametersBuilderProtocol<T> {
    associated_data(List<int> value) {
        throw UnimplementedError('associated_data not implemented.');
    }
    build() {
        throw UnimplementedError('build not implemented.');
    }
    dc_version(int value) {
        throw UnimplementedError('dc_version not implemented.');
    }
    iterations(int value) {
        throw UnimplementedError('iterations not implemented.');
    }
    lanes(int value) {
        throw UnimplementedError('lanes not implemented.');
    }
    length(int value) {
        throw UnimplementedError('length not implemented.');
    }
    memory(int value) {
        throw UnimplementedError('memory not implemented.');
    }
    salt(List<int> value) {
        throw UnimplementedError('salt not implemented.');
    }
    secret_key(List<int> value) {
        throw UnimplementedError('secret_key not implemented.');
    }
    variant(Argon2Variant value) {
        throw UnimplementedError('variant not implemented.');
    }
    version(Argon2Version value) {
        throw UnimplementedError('version not implemented.');
    }
}

// Generated By: ObjectTemplate:1
class Argon2ParametersBuilder {
    //late Argon2ParametersBuilder _pointer;
    late Pointer _pointer;
    Pointer get pointer => _pointer;
    Argon2ParametersBuilder () {
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
        _pointer = _rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_constructor_argon2parametersbuilder_new_func(
    _rustCallStatus),
    _rustCallStatus
);
    }

    Argon2ParametersBuilder.fromPointer(Pointer _pointer) {
        this._pointer = _pointer;
    }

    @override
    void dispose() {
        // In case of partial initialization of instances.
        if (_pointer != null) {
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
            _rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_free_argon2parametersbuilder_func(_pointer, _rustCallStatus), _rustCallStatus);
        }
    }

    // method: 2
    Argon2ParametersBuilder associated_data(List<int> value) {
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
        return _UniffiConverterTypeArgon2ParametersBuilder().lift(
            _rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_associated_data_func(_pointer,
        _UniffiConverterBytes().lower(value),
    _rustCallStatus),
    _rustCallStatus
)
        );
    }





    // method: 2
    Argon2Parameters build() {
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
        return _UniffiConverterTypeArgon2Parameters().lift(
            _rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_build_func(_pointer,
    _rustCallStatus),
    _rustCallStatus
)
        );
    }





    // method: 2
    Argon2ParametersBuilder dc_version(int value) {
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
        return _UniffiConverterTypeArgon2ParametersBuilder().lift(
            _rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_dc_version_func(_pointer,
        _UniffiConverterUInt32().lower(value),
    _rustCallStatus),
    _rustCallStatus
)
        );
    }





    // method: 2
    Argon2ParametersBuilder iterations(int value) {
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
        return _UniffiConverterTypeArgon2ParametersBuilder().lift(
            _rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_iterations_func(_pointer,
        _UniffiConverterUInt32().lower(value),
    _rustCallStatus),
    _rustCallStatus
)
        );
    }





    // method: 2
    Argon2ParametersBuilder lanes(int value) {
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
        return _UniffiConverterTypeArgon2ParametersBuilder().lift(
            _rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_lanes_func(_pointer,
        _UniffiConverterUInt32().lower(value),
    _rustCallStatus),
    _rustCallStatus
)
        );
    }





    // method: 2
    Argon2ParametersBuilder length(int value) {
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
        return _UniffiConverterTypeArgon2ParametersBuilder().lift(
            _rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_length_func(_pointer,
        _UniffiConverterUInt32().lower(value),
    _rustCallStatus),
    _rustCallStatus
)
        );
    }





    // method: 2
    Argon2ParametersBuilder memory(int value) {
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
        return _UniffiConverterTypeArgon2ParametersBuilder().lift(
            _rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_memory_func(_pointer,
        _UniffiConverterUInt32().lower(value),
    _rustCallStatus),
    _rustCallStatus
)
        );
    }





    // method: 2
    Argon2ParametersBuilder salt(List<int> value) {
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
        return _UniffiConverterTypeArgon2ParametersBuilder().lift(
            _rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_salt_func(_pointer,
        _UniffiConverterBytes().lower(value),
    _rustCallStatus),
    _rustCallStatus
)
        );
    }





    // method: 2
    Argon2ParametersBuilder secret_key(List<int> value) {
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
        return _UniffiConverterTypeArgon2ParametersBuilder().lift(
            _rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_secret_key_func(_pointer,
        _UniffiConverterBytes().lower(value),
    _rustCallStatus),
    _rustCallStatus
)
        );
    }





    // method: 2
    Argon2ParametersBuilder variant(Argon2Variant value) {
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
        return _UniffiConverterTypeArgon2ParametersBuilder().lift(
            _rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_variant_func(_pointer,
        _UniffiConverterTypeArgon2Variant().lower(value),
    _rustCallStatus),
    _rustCallStatus
)
        );
    }





    // method: 2
    Argon2ParametersBuilder version(Argon2Version value) {
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
        return _UniffiConverterTypeArgon2ParametersBuilder().lift(
            _rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_argon2parametersbuilder_version_func(_pointer,
        _UniffiConverterTypeArgon2Version().lower(value),
    _rustCallStatus),
    _rustCallStatus
)
        );
    }




}

// Generated By: ObjectTemplate:2
class _UniffiConverterTypeArgon2ParametersBuilder {

    Argon2ParametersBuilder lift(Pointer _pointer) {
      // TODO: Do something with value?
      return Argon2ParametersBuilder.fromPointer(_pointer);
    }

    Pointer lower(Argon2ParametersBuilder value) {
      return value.pointer;
    }

    /*
    static Argon2ParametersBuilderProtocol lower(Argon2ParametersBuilder value) {
        //if not isinstance(value, Argon2ParametersBuilder):
        //    raise TypeError("Expected Argon2ParametersBuilder instance, {} found".format(type(value).__name__))
        //return value._pointer
        return Argon2ParametersBuilderProtocol();
    }*/

    read(_UniffiRustBufferBuilder buf) {
        var ptr = buf.read_i64();
        if (ptr == 0) {
            throw 'Issue with pointer'; 
        }
        return _UniffiConverterTypeArgon2ParametersBuilder().lift(Pointer.fromAddress(ptr));
    }

    _UniffiRustBufferBuilder write(_UniffiRustBufferBuilder buf, value) {
      //buf.write_u64(cls.lower(value)) 
        Pointer<_UniffiRustBuffer> _rustBuffer = calloc<_UniffiRustBuffer >();
        return _rustBuffer.ref.buffer;
    }
}



// Generated by Protocol
abstract class SigningKeyPairProtocol<T> {
    get_private_key() {
        throw UnimplementedError('get_private_key not implemented.');
    }
    get_public_key() {
        throw UnimplementedError('get_public_key not implemented.');
    }
}

// Generated By: ObjectTemplate:1
class SigningKeyPair {
    //late SigningKeyPair _pointer;
    late Pointer _pointer;
    Pointer get pointer => _pointer;

    SigningKeyPair.fromPointer(Pointer _pointer) {
        this._pointer = _pointer;
    }

    @override
    void dispose() {
        // In case of partial initialization of instances.
        if (_pointer != null) {
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
            _rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_free_signingkeypair_func(_pointer, _rustCallStatus), _rustCallStatus);
        }
    }

    /*static new_from_bytes(List<int> data) {
    //
    
    //    // Call the (fallible) function before creating any half-baked object instances.
    //    this._pointer = _rustCallWithError(_UniffiConverterTypeDevolutionsCryptoError(),() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_constructor_signingkeypair_new_from_bytes_func(
        _UniffiConverterBytes().lower(data),
    notimpl),
    notimpl
);
    //    return make_instance_(_pointer):// TODO
    //}*/


    // method: 2
    List<int> get_private_key() {
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
        return _UniffiConverterBytes().lift(
            _rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_signingkeypair_get_private_key_func(_pointer,
    _rustCallStatus),
    _rustCallStatus
)
        );
    }





    // method: 2
    List<int> get_public_key() {
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
        return _UniffiConverterBytes().lift(
            _rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_method_signingkeypair_get_public_key_func(_pointer,
    _rustCallStatus),
    _rustCallStatus
)
        );
    }




}

// Generated By: ObjectTemplate:2
class _UniffiConverterTypeSigningKeyPair {

    SigningKeyPair lift(Pointer _pointer) {
      // TODO: Do something with value?
      return SigningKeyPair.fromPointer(_pointer);
    }

    Pointer lower(SigningKeyPair value) {
      return value.pointer;
    }

    /*
    static SigningKeyPairProtocol lower(SigningKeyPair value) {
        //if not isinstance(value, SigningKeyPair):
        //    raise TypeError("Expected SigningKeyPair instance, {} found".format(type(value).__name__))
        //return value._pointer
        return SigningKeyPairProtocol();
    }*/

    read(_UniffiRustBufferBuilder buf) {
        var ptr = buf.read_i64();
        if (ptr == 0) {
            throw 'Issue with pointer'; 
        }
        return _UniffiConverterTypeSigningKeyPair().lift(Pointer.fromAddress(ptr));
    }

    _UniffiRustBufferBuilder write(_UniffiRustBufferBuilder buf, value) {
      //buf.write_u64(cls.lower(value)) 
        Pointer<_UniffiRustBuffer> _rustBuffer = calloc<_UniffiRustBuffer >();
        return _rustBuffer.ref.buffer;
    }
}


// Generated By RecordTemplate: 1
class KeyPair {
    
        final List<int> public_key;
        final List<int> private_key;

    KeyPair({ 
      required this.public_key
    , 
      required this.private_key
     }); 

    @override
    String toString() {
        return "KeyPair()";
    }

    @override
    bool operator ==(Object other) {
      if (other is KeyPair ) {
          if (public_key != other.public_key) {
              return false;
          }
          if (private_key != other.private_key) {
              return false;
          }
        return true;
      }
      return false;
    } 

    //@override
    //int get hashCode => this.tires * this.doors;
}

// Generated By RecordTemplate: 2
class _UniffiConverterTypeKeyPair extends _UniffiConverterRustBuffer {

   read(_UniffiRustBufferBuilder buf) {
      return KeyPair(
        public_key: _UniffiConverterBytes().read(buf),
        private_key: _UniffiConverterBytes().read(buf),
      );
   }

   _UniffiRustBufferBuilder write(buf, value) {
        /*
        //_UniffiConverterBytes().write(value.public_key, buf)
        //_UniffiConverterBytes().write(value.private_key, buf)*/
     return buf;
   }
}





// Enumtemplate: 1
enum Argon2Variant {
    _,
    ARGON2D,
    ARGON2I,
    ARGON2ID,
    
}


// Generated By: EnumTemplate: 3
class _UniffiConverterTypeArgon2Variant extends _UniffiConverterRustBuffer<Argon2Variant> {
    read(_UniffiRustBufferBuilder buf) {
        var variant = buf.read_i32();
        if (variant == 1) {
            return Argon2Variant.ARGON2D;
        }
        if (variant == 2) {
            return Argon2Variant.ARGON2I;
        }
        if (variant == 3) {
            return Argon2Variant.ARGON2ID;
        }
        throw "Raw enum value doesn't match any cases";
   }

    write(_UniffiRustBufferBuilder buf, Argon2Variant value) {
        if (value == Argon2Variant.ARGON2D) {
            buf.write_i32(1);
        }
        if (value == Argon2Variant.ARGON2I) {
            buf.write_i32(2);
        }
        if (value == Argon2Variant.ARGON2ID) {
            buf.write_i32(3);
        }
    }
}






// Enumtemplate: 1
enum Argon2Version {
    _,
    VERSION10,
    VERSION13,
    
}


// Generated By: EnumTemplate: 3
class _UniffiConverterTypeArgon2Version extends _UniffiConverterRustBuffer<Argon2Version> {
    read(_UniffiRustBufferBuilder buf) {
        var variant = buf.read_i32();
        if (variant == 1) {
            return Argon2Version.VERSION10;
        }
        if (variant == 2) {
            return Argon2Version.VERSION13;
        }
        throw "Raw enum value doesn't match any cases";
   }

    write(_UniffiRustBufferBuilder buf, Argon2Version value) {
        if (value == Argon2Version.VERSION10) {
            buf.write_i32(1);
        }
        if (value == Argon2Version.VERSION13) {
            buf.write_i32(2);
        }
    }
}






// Enumtemplate: 1
enum CiphertextVersion {
    _,
    LATEST,
    V1,
    V2,
    
}


// Generated By: EnumTemplate: 3
class _UniffiConverterTypeCiphertextVersion extends _UniffiConverterRustBuffer<CiphertextVersion> {
    read(_UniffiRustBufferBuilder buf) {
        var variant = buf.read_i32();
        if (variant == 1) {
            return CiphertextVersion.LATEST;
        }
        if (variant == 2) {
            return CiphertextVersion.V1;
        }
        if (variant == 3) {
            return CiphertextVersion.V2;
        }
        throw "Raw enum value doesn't match any cases";
   }

    write(_UniffiRustBufferBuilder buf, CiphertextVersion value) {
        if (value == CiphertextVersion.LATEST) {
            buf.write_i32(1);
        }
        if (value == CiphertextVersion.V1) {
            buf.write_i32(2);
        }
        if (value == CiphertextVersion.V2) {
            buf.write_i32(3);
        }
    }
}






// Enumtemplate: 1
enum DataType {
    _,
    NONE,
    KEY,
    CIPHERTEXT,
    PASSWORD_HASH,
    SHARE,
    SIGNING_KEY,
    SIGNATURE,
    ONLINE_CIPHERTEXT,
    
}


// Generated By: EnumTemplate: 3
class _UniffiConverterTypeDataType extends _UniffiConverterRustBuffer<DataType> {
    read(_UniffiRustBufferBuilder buf) {
        var variant = buf.read_i32();
        if (variant == 1) {
            return DataType.NONE;
        }
        if (variant == 2) {
            return DataType.KEY;
        }
        if (variant == 3) {
            return DataType.CIPHERTEXT;
        }
        if (variant == 4) {
            return DataType.PASSWORD_HASH;
        }
        if (variant == 5) {
            return DataType.SHARE;
        }
        if (variant == 6) {
            return DataType.SIGNING_KEY;
        }
        if (variant == 7) {
            return DataType.SIGNATURE;
        }
        if (variant == 8) {
            return DataType.ONLINE_CIPHERTEXT;
        }
        throw "Raw enum value doesn't match any cases";
   }

    write(_UniffiRustBufferBuilder buf, DataType value) {
        if (value == DataType.NONE) {
            buf.write_i32(1);
        }
        if (value == DataType.KEY) {
            buf.write_i32(2);
        }
        if (value == DataType.CIPHERTEXT) {
            buf.write_i32(3);
        }
        if (value == DataType.PASSWORD_HASH) {
            buf.write_i32(4);
        }
        if (value == DataType.SHARE) {
            buf.write_i32(5);
        }
        if (value == DataType.SIGNING_KEY) {
            buf.write_i32(6);
        }
        if (value == DataType.SIGNATURE) {
            buf.write_i32(7);
        }
        if (value == DataType.ONLINE_CIPHERTEXT) {
            buf.write_i32(8);
        }
    }
}



//# DevolutionsCryptoError
//# We want to define each variant as a nested class that's also a subclass,
//# which is tricky in Python.  To accomplish this we're going to create each
//# class separately, then manually add the child classes to the base class's
//# __dict__.  All of this happens in dummy class to avoid polluting the module
//# namespace.

// Generated by ErrorTemplate: 1
class DevolutionsCryptoErrorException implements Exception {
  String cause;
  DevolutionsCryptoErrorException(this.cause);
}

//_UniffiTempDevolutionsCryptoError = DevolutionsCryptoError

// Generated by ErrorTemplate: 2
class DevolutionsCryptoError implements Exception{  
    final String cause;

    DevolutionsCryptoError(this.cause);
    DevolutionsCryptoError.InvalidLength(this.cause);
    //_UniffiTempDevolutionsCryptoError.InvalidLength = InvalidLength
    DevolutionsCryptoError.InvalidKeyLength(this.cause);
    //_UniffiTempDevolutionsCryptoError.InvalidKeyLength = InvalidKeyLength
    DevolutionsCryptoError.InvalidOutputLength(this.cause);
    //_UniffiTempDevolutionsCryptoError.InvalidOutputLength = InvalidOutputLength
    DevolutionsCryptoError.InvalidSignature(this.cause);
    //_UniffiTempDevolutionsCryptoError.InvalidSignature = InvalidSignature
    DevolutionsCryptoError.InvalidMac(this.cause);
    //_UniffiTempDevolutionsCryptoError.InvalidMac = InvalidMac
    DevolutionsCryptoError.InvalidDataType(this.cause);
    //_UniffiTempDevolutionsCryptoError.InvalidDataType = InvalidDataType
    DevolutionsCryptoError.UnknownType(this.cause);
    //_UniffiTempDevolutionsCryptoError.UnknownType = UnknownType
    DevolutionsCryptoError.UnknownSubtype(this.cause);
    //_UniffiTempDevolutionsCryptoError.UnknownSubtype = UnknownSubtype
    DevolutionsCryptoError.UnknownVersion(this.cause);
    //_UniffiTempDevolutionsCryptoError.UnknownVersion = UnknownVersion
    DevolutionsCryptoError.InvalidData(this.cause);
    //_UniffiTempDevolutionsCryptoError.InvalidData = InvalidData
    DevolutionsCryptoError.NullPointer(this.cause);
    //_UniffiTempDevolutionsCryptoError.NullPointer = NullPointer
    DevolutionsCryptoError.CryptoError(this.cause);
    //_UniffiTempDevolutionsCryptoError.CryptoError = CryptoError
    DevolutionsCryptoError.RandomError(this.cause);
    //_UniffiTempDevolutionsCryptoError.RandomError = RandomError
    DevolutionsCryptoError.IoError(this.cause);
    //_UniffiTempDevolutionsCryptoError.IoError = IoError
    DevolutionsCryptoError.NotEnoughShares(this.cause);
    //_UniffiTempDevolutionsCryptoError.NotEnoughShares = NotEnoughShares
    DevolutionsCryptoError.InconsistentVersion(this.cause);
    //_UniffiTempDevolutionsCryptoError.InconsistentVersion = InconsistentVersion
    DevolutionsCryptoError.InvalidChunkLength(this.cause);
    //_UniffiTempDevolutionsCryptoError.InvalidChunkLength = InvalidChunkLength
    DevolutionsCryptoError.PoisonedMutex(this.cause);
    //_UniffiTempDevolutionsCryptoError.PoisonedMutex = PoisonedMutex
}

//DevolutionsCryptoError = _UniffiTempDevolutionsCryptoError 
//del _UniffiTempDevolutionsCryptoError

// Generated by ErrorTemplate: 3
class _UniffiConverterTypeDevolutionsCryptoError extends _UniffiWithError {
    _UniffiRustBuffer lift(Pointer<_UniffiRustCallStatus> val) {
      //print(val.ref.error_buf.toDartString());
      return val.ref.error_buf;

    }

    @override
    liftNotStatic(Pointer<_UniffiRustCallStatus> buf) {
      return lift(buf);
    }

    toError(Pointer<_UniffiRustCallStatus> val) {
      print("Debug (${val.ref.code}): '${val.ref.error_buf.data.toDartString()}'");
      if (val.ref.code == 1) {
          throw DevolutionsCryptoError.InvalidLength(
              _UniffiConverterString().lift(val.ref.error_buf)
          );
      }
      if (val.ref.code == 2) {
          throw DevolutionsCryptoError.InvalidKeyLength(
              _UniffiConverterString().lift(val.ref.error_buf)
          );
      }
      if (val.ref.code == 3) {
          throw DevolutionsCryptoError.InvalidOutputLength(
              _UniffiConverterString().lift(val.ref.error_buf)
          );
      }
      if (val.ref.code == 4) {
          throw DevolutionsCryptoError.InvalidSignature(
              _UniffiConverterString().lift(val.ref.error_buf)
          );
      }
      if (val.ref.code == 5) {
          throw DevolutionsCryptoError.InvalidMac(
              _UniffiConverterString().lift(val.ref.error_buf)
          );
      }
      if (val.ref.code == 6) {
          throw DevolutionsCryptoError.InvalidDataType(
              _UniffiConverterString().lift(val.ref.error_buf)
          );
      }
      if (val.ref.code == 7) {
          throw DevolutionsCryptoError.UnknownType(
              _UniffiConverterString().lift(val.ref.error_buf)
          );
      }
      if (val.ref.code == 8) {
          throw DevolutionsCryptoError.UnknownSubtype(
              _UniffiConverterString().lift(val.ref.error_buf)
          );
      }
      if (val.ref.code == 9) {
          throw DevolutionsCryptoError.UnknownVersion(
              _UniffiConverterString().lift(val.ref.error_buf)
          );
      }
      if (val.ref.code == 10) {
          throw DevolutionsCryptoError.InvalidData(
              _UniffiConverterString().lift(val.ref.error_buf)
          );
      }
      if (val.ref.code == 11) {
          throw DevolutionsCryptoError.NullPointer(
              _UniffiConverterString().lift(val.ref.error_buf)
          );
      }
      if (val.ref.code == 12) {
          throw DevolutionsCryptoError.CryptoError(
              _UniffiConverterString().lift(val.ref.error_buf)
          );
      }
      if (val.ref.code == 13) {
          throw DevolutionsCryptoError.RandomError(
              _UniffiConverterString().lift(val.ref.error_buf)
          );
      }
      if (val.ref.code == 14) {
          throw DevolutionsCryptoError.IoError(
              _UniffiConverterString().lift(val.ref.error_buf)
          );
      }
      if (val.ref.code == 15) {
          throw DevolutionsCryptoError.NotEnoughShares(
              _UniffiConverterString().lift(val.ref.error_buf)
          );
      }
      if (val.ref.code == 16) {
          throw DevolutionsCryptoError.InconsistentVersion(
              _UniffiConverterString().lift(val.ref.error_buf)
          );
      }
      if (val.ref.code == 17) {
          throw DevolutionsCryptoError.InvalidChunkLength(
              _UniffiConverterString().lift(val.ref.error_buf)
          );
      }
      if (val.ref.code == 18) {
          throw DevolutionsCryptoError.PoisonedMutex(
              _UniffiConverterString().lift(val.ref.error_buf)
          );
      }
      throw "Does not match any cases (${val.ref.code}): ${val.ref.error_buf.data.toDartString()}";
    }

    read(buf) {
        //variant = buf.read_i32()
        //
        //if variant == 1:
        //    return DevolutionsCryptoError.InvalidLength(
        //
        //        _UniffiConverterString().read(buf),
        //
        //    )
        //
        //if variant == 2:
        //    return DevolutionsCryptoError.InvalidKeyLength(
        //
        //        _UniffiConverterString().read(buf),
        //
        //    )
        //
        //if variant == 3:
        //    return DevolutionsCryptoError.InvalidOutputLength(
        //
        //        _UniffiConverterString().read(buf),
        //
        //    )
        //
        //if variant == 4:
        //    return DevolutionsCryptoError.InvalidSignature(
        //
        //        _UniffiConverterString().read(buf),
        //
        //    )
        //
        //if variant == 5:
        //    return DevolutionsCryptoError.InvalidMac(
        //
        //        _UniffiConverterString().read(buf),
        //
        //    )
        //
        //if variant == 6:
        //    return DevolutionsCryptoError.InvalidDataType(
        //
        //        _UniffiConverterString().read(buf),
        //
        //    )
        //
        //if variant == 7:
        //    return DevolutionsCryptoError.UnknownType(
        //
        //        _UniffiConverterString().read(buf),
        //
        //    )
        //
        //if variant == 8:
        //    return DevolutionsCryptoError.UnknownSubtype(
        //
        //        _UniffiConverterString().read(buf),
        //
        //    )
        //
        //if variant == 9:
        //    return DevolutionsCryptoError.UnknownVersion(
        //
        //        _UniffiConverterString().read(buf),
        //
        //    )
        //
        //if variant == 10:
        //    return DevolutionsCryptoError.InvalidData(
        //
        //        _UniffiConverterString().read(buf),
        //
        //    )
        //
        //if variant == 11:
        //    return DevolutionsCryptoError.NullPointer(
        //
        //        _UniffiConverterString().read(buf),
        //
        //    )
        //
        //if variant == 12:
        //    return DevolutionsCryptoError.CryptoError(
        //
        //        _UniffiConverterString().read(buf),
        //
        //    )
        //
        //if variant == 13:
        //    return DevolutionsCryptoError.RandomError(
        //
        //        _UniffiConverterString().read(buf),
        //
        //    )
        //
        //if variant == 14:
        //    return DevolutionsCryptoError.IoError(
        //
        //        _UniffiConverterString().read(buf),
        //
        //    )
        //
        //if variant == 15:
        //    return DevolutionsCryptoError.NotEnoughShares(
        //
        //        _UniffiConverterString().read(buf),
        //
        //    )
        //
        //if variant == 16:
        //    return DevolutionsCryptoError.InconsistentVersion(
        //
        //        _UniffiConverterString().read(buf),
        //
        //    )
        //
        //if variant == 17:
        //    return DevolutionsCryptoError.InvalidChunkLength(
        //
        //        _UniffiConverterString().read(buf),
        //
        //    )
        //
        //if variant == 18:
        //    return DevolutionsCryptoError.PoisonedMutex(
        //
        //        _UniffiConverterString().read(buf),
        //
        //    )
        //
        //raise InternalError("Raw enum value doesn't match any cases")
    }

    static write(value, buf) {
        //
        //if isinstance(value, DevolutionsCryptoError.InvalidLength):
        //    buf.write_i32(1)
        //
        //
        //if isinstance(value, DevolutionsCryptoError.InvalidKeyLength):
        //    buf.write_i32(2)
        //
        //
        //if isinstance(value, DevolutionsCryptoError.InvalidOutputLength):
        //    buf.write_i32(3)
        //
        //
        //if isinstance(value, DevolutionsCryptoError.InvalidSignature):
        //    buf.write_i32(4)
        //
        //
        //if isinstance(value, DevolutionsCryptoError.InvalidMac):
        //    buf.write_i32(5)
        //
        //
        //if isinstance(value, DevolutionsCryptoError.InvalidDataType):
        //    buf.write_i32(6)
        //
        //
        //if isinstance(value, DevolutionsCryptoError.UnknownType):
        //    buf.write_i32(7)
        //
        //
        //if isinstance(value, DevolutionsCryptoError.UnknownSubtype):
        //    buf.write_i32(8)
        //
        //
        //if isinstance(value, DevolutionsCryptoError.UnknownVersion):
        //    buf.write_i32(9)
        //
        //
        //if isinstance(value, DevolutionsCryptoError.InvalidData):
        //    buf.write_i32(10)
        //
        //
        //if isinstance(value, DevolutionsCryptoError.NullPointer):
        //    buf.write_i32(11)
        //
        //
        //if isinstance(value, DevolutionsCryptoError.CryptoError):
        //    buf.write_i32(12)
        //
        //
        //if isinstance(value, DevolutionsCryptoError.RandomError):
        //    buf.write_i32(13)
        //
        //
        //if isinstance(value, DevolutionsCryptoError.IoError):
        //    buf.write_i32(14)
        //
        //
        //if isinstance(value, DevolutionsCryptoError.NotEnoughShares):
        //    buf.write_i32(15)
        //
        //
        //if isinstance(value, DevolutionsCryptoError.InconsistentVersion):
        //    buf.write_i32(16)
        //
        //
        //if isinstance(value, DevolutionsCryptoError.InvalidChunkLength):
        //    buf.write_i32(17)
        //
        //
        //if isinstance(value, DevolutionsCryptoError.PoisonedMutex):
        //    buf.write_i32(18)
        //
        //
    }
}





// Enumtemplate: 1
enum KeyVersion {
    _,
    LATEST,
    V1,
    
}


// Generated By: EnumTemplate: 3
class _UniffiConverterTypeKeyVersion extends _UniffiConverterRustBuffer<KeyVersion> {
    read(_UniffiRustBufferBuilder buf) {
        var variant = buf.read_i32();
        if (variant == 1) {
            return KeyVersion.LATEST;
        }
        if (variant == 2) {
            return KeyVersion.V1;
        }
        throw "Raw enum value doesn't match any cases";
   }

    write(_UniffiRustBufferBuilder buf, KeyVersion value) {
        if (value == KeyVersion.LATEST) {
            buf.write_i32(1);
        }
        if (value == KeyVersion.V1) {
            buf.write_i32(2);
        }
    }
}






// Enumtemplate: 1
enum PasswordHashVersion {
    _,
    LATEST,
    V1,
    
}


// Generated By: EnumTemplate: 3
class _UniffiConverterTypePasswordHashVersion extends _UniffiConverterRustBuffer<PasswordHashVersion> {
    read(_UniffiRustBufferBuilder buf) {
        var variant = buf.read_i32();
        if (variant == 1) {
            return PasswordHashVersion.LATEST;
        }
        if (variant == 2) {
            return PasswordHashVersion.V1;
        }
        throw "Raw enum value doesn't match any cases";
   }

    write(_UniffiRustBufferBuilder buf, PasswordHashVersion value) {
        if (value == PasswordHashVersion.LATEST) {
            buf.write_i32(1);
        }
        if (value == PasswordHashVersion.V1) {
            buf.write_i32(2);
        }
    }
}






// Enumtemplate: 1
enum SecretSharingVersion {
    _,
    LATEST,
    V1,
    
}


// Generated By: EnumTemplate: 3
class _UniffiConverterTypeSecretSharingVersion extends _UniffiConverterRustBuffer<SecretSharingVersion> {
    read(_UniffiRustBufferBuilder buf) {
        var variant = buf.read_i32();
        if (variant == 1) {
            return SecretSharingVersion.LATEST;
        }
        if (variant == 2) {
            return SecretSharingVersion.V1;
        }
        throw "Raw enum value doesn't match any cases";
   }

    write(_UniffiRustBufferBuilder buf, SecretSharingVersion value) {
        if (value == SecretSharingVersion.LATEST) {
            buf.write_i32(1);
        }
        if (value == SecretSharingVersion.V1) {
            buf.write_i32(2);
        }
    }
}






// Enumtemplate: 1
enum SignatureVersion {
    _,
    LATEST,
    V1,
    
}


// Generated By: EnumTemplate: 3
class _UniffiConverterTypeSignatureVersion extends _UniffiConverterRustBuffer<SignatureVersion> {
    read(_UniffiRustBufferBuilder buf) {
        var variant = buf.read_i32();
        if (variant == 1) {
            return SignatureVersion.LATEST;
        }
        if (variant == 2) {
            return SignatureVersion.V1;
        }
        throw "Raw enum value doesn't match any cases";
   }

    write(_UniffiRustBufferBuilder buf, SignatureVersion value) {
        if (value == SignatureVersion.LATEST) {
            buf.write_i32(1);
        }
        if (value == SignatureVersion.V1) {
            buf.write_i32(2);
        }
    }
}






// Enumtemplate: 1
enum SigningKeyVersion {
    _,
    LATEST,
    V1,
    
}


// Generated By: EnumTemplate: 3
class _UniffiConverterTypeSigningKeyVersion extends _UniffiConverterRustBuffer<SigningKeyVersion> {
    read(_UniffiRustBufferBuilder buf) {
        var variant = buf.read_i32();
        if (variant == 1) {
            return SigningKeyVersion.LATEST;
        }
        if (variant == 2) {
            return SigningKeyVersion.V1;
        }
        throw "Raw enum value doesn't match any cases";
   }

    write(_UniffiRustBufferBuilder buf, SigningKeyVersion value) {
        if (value == SigningKeyVersion.LATEST) {
            buf.write_i32(1);
        }
        if (value == SigningKeyVersion.V1) {
            buf.write_i32(2);
        }
    }
}




// Generated by OptionalTemplate
class _UniffiConverterOptionalBytes extends _UniffiConverterRustBuffer<List<int>?> {

  write(_UniffiRustBufferBuilder buf, value) {
    if(value == null) {
      buf.write_u8(0);
      return buf;
    }
    buf.write_u8(1);
    //_UniffiConverterBytes.write(value, buf)
  }

  read(_UniffiRustBufferBuilder buf) {
    var flag = buf.read_u8();
    if(flag == 0) {
      return null;
    } else if (flag == 1) {
      return _UniffiConverterBytes().read(buf);
    } else {
      throw "Unexpected flag byte for optional type";
    }
  }


  //// U8 - is the storage
  //@override
  //List<int>? lift(_UniffiRustBuffer buf) {
  //  if (buf.len > 0) {
  //    buf.data = Pointer.fromAddress(buf.data.address + 0x5);
  //    return _UniffiConverterBytes().lift(buf);
  //  } else {
  //    return null;
  //  }
  //}

  //@override
  //_UniffiRustBuffer lower(buf) {
  //  if (buf == null) {
  //    return _UniffiConverterBytes.write("\u{0}");
  //  } else {
  //    return _UniffiConverterBytes.write("\u{1}" + buf);
  //  }
  //}
}



// Generated by SequenceTemplate
class _UniffiConverterSequenceBytes extends _UniffiConverterRustBuffer<List<List<int>>> {

  read(_UniffiRustBufferBuilder buf) {
        var count = buf.read_i32();
        if (count < 0) {
            throw "Unexpected negative sequence length";
        }

        List<List<int>> list = [];

        for (var i = 0; i < count; i++) {
          var item = _UniffiConverterBytes().read(buf);
          list.add(item);
        }

        return list;
  }

    write(_UniffiRustBufferBuilder buf, value) {
        //buf.data.cast<Int16> = value;
        Pointer<_UniffiRustBuffer> _rustBuffer = calloc<_UniffiRustBuffer >();
        return _rustBuffer.ref.buffer;
    }
}

// From TopLevelFunctionTemplate: 2
List<int> encrypt(List<int> data,List<int> key,CiphertextVersion version) {
    
    
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterBytes().lift(_rustCallWithError(_UniffiConverterTypeDevolutionsCryptoError(),() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_func(
        _UniffiConverterBytes().lower(data),
        _UniffiConverterBytes().lower(key),
        _UniffiConverterTypeCiphertextVersion().lower(version),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
List<int> encrypt_asymmetric(List<int> data,List<int> key,CiphertextVersion version) {
    
    
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterBytes().lift(_rustCallWithError(_UniffiConverterTypeDevolutionsCryptoError(),() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_asymmetric_func(
        _UniffiConverterBytes().lower(data),
        _UniffiConverterBytes().lower(key),
        _UniffiConverterTypeCiphertextVersion().lower(version),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
List<int> encrypt_asymmetric_with_aad(List<int> data,List<int> key,List<int> aad,CiphertextVersion version) {
    
    
    
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterBytes().lift(_rustCallWithError(_UniffiConverterTypeDevolutionsCryptoError(),() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_asymmetric_with_aad_func(
        _UniffiConverterBytes().lower(data),
        _UniffiConverterBytes().lower(key),
        _UniffiConverterBytes().lower(aad),
        _UniffiConverterTypeCiphertextVersion().lower(version),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
List<int> encrypt_with_aad(List<int> data,List<int> key,List<int> aad,CiphertextVersion version) {
    
    
    
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterBytes().lift(_rustCallWithError(_UniffiConverterTypeDevolutionsCryptoError(),() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_encrypt_with_aad_func(
        _UniffiConverterBytes().lower(data),
        _UniffiConverterBytes().lower(key),
        _UniffiConverterBytes().lower(aad),
        _UniffiConverterTypeCiphertextVersion().lower(version),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
KeyPair generate_keypair(KeyVersion version) {
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterTypeKeyPair().lift(_rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_keypair_func(
        _UniffiConverterTypeKeyVersion().lower(version),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
List<List<int>> generate_shared_key(int n_shares,int threshold,int length,SecretSharingVersion version) {
    
    
    
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterSequenceBytes().lift(_rustCallWithError(_UniffiConverterTypeDevolutionsCryptoError(),() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_shared_key_func(
        _UniffiConverterUInt8().lower(n_shares),
        _UniffiConverterUInt8().lower(threshold),
        _UniffiConverterUInt32().lower(length),
        _UniffiConverterTypeSecretSharingVersion().lower(version),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
SigningKeyPair generate_signing_keypair(SigningKeyVersion version) {
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterTypeSigningKeyPair().lift(_rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_signing_keypair_func(
        _UniffiConverterTypeSigningKeyVersion().lower(version),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
List<int> hash_password(List<int> password,int iterations,PasswordHashVersion version) {
    
    
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterBytes().lift(_rustCallWithError(_UniffiConverterTypeDevolutionsCryptoError(),() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_hash_password_func(
        _UniffiConverterBytes().lower(password),
        _UniffiConverterUInt32().lower(iterations),
        _UniffiConverterTypePasswordHashVersion().lower(version),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
List<int> sign(List<int> data,List<int> keypair,SignatureVersion version) {
    
    
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterBytes().lift(_rustCallWithError(_UniffiConverterTypeDevolutionsCryptoError(),() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_sign_func(
        _UniffiConverterBytes().lower(data),
        _UniffiConverterBytes().lower(keypair),
        _UniffiConverterTypeSignatureVersion().lower(version),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
List<int> base64_decode(String data) {
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterBytes().lift(_rustCallWithError(_UniffiConverterTypeDevolutionsCryptoError(),() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_decode_func(
        _UniffiConverterString().lower(data),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
List<int> base64_decode_url(String data) {
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterBytes().lift(_rustCallWithError(_UniffiConverterTypeDevolutionsCryptoError(),() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_decode_url_func(
        _UniffiConverterString().lower(data),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
String base64_encode(List<int> data) {
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterString().lift(_rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_encode_func(
        _UniffiConverterBytes().lower(data),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
String base64_encode_url(List<int> data) {
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterString().lift(_rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_base64_encode_url_func(
        _UniffiConverterBytes().lower(data),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
List<int> decrypt(List<int> data,List<int> key) {
    
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterBytes().lift(_rustCallWithError(_UniffiConverterTypeDevolutionsCryptoError(),() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_func(
        _UniffiConverterBytes().lower(data),
        _UniffiConverterBytes().lower(key),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
List<int> decrypt_asymmetric(List<int> data,List<int> key) {
    
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterBytes().lift(_rustCallWithError(_UniffiConverterTypeDevolutionsCryptoError(),() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_asymmetric_func(
        _UniffiConverterBytes().lower(data),
        _UniffiConverterBytes().lower(key),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
List<int> decrypt_asymmetric_with_aad(List<int> data,List<int> key,List<int> aad) {
    
    
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterBytes().lift(_rustCallWithError(_UniffiConverterTypeDevolutionsCryptoError(),() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_asymmetric_with_aad_func(
        _UniffiConverterBytes().lower(data),
        _UniffiConverterBytes().lower(key),
        _UniffiConverterBytes().lower(aad),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
List<int> decrypt_with_aad(List<int> data,List<int> key,List<int> aad) {
    
    
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterBytes().lift(_rustCallWithError(_UniffiConverterTypeDevolutionsCryptoError(),() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_decrypt_with_aad_func(
        _UniffiConverterBytes().lower(data),
        _UniffiConverterBytes().lower(key),
        _UniffiConverterBytes().lower(aad),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
List<int> derive_key_argon2(List<int> key,Argon2Parameters parameters) {
    
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterBytes().lift(_rustCallWithError(_UniffiConverterTypeDevolutionsCryptoError(),() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_derive_key_argon2_func(
        _UniffiConverterBytes().lower(key),
        _UniffiConverterTypeArgon2Parameters().lower(parameters),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
List<int> derive_key_pbkdf2(List<int> key,List<int>? salt,int iterations,int length) {
    
    
    
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterBytes().lift(_rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_derive_key_pbkdf2_func(
        _UniffiConverterBytes().lower(key),
        _UniffiConverterOptionalBytes().lower(salt),
        _UniffiConverterUInt32().lower(iterations),
        _UniffiConverterUInt32().lower(length),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
List<int> generate_key(int length) {
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterBytes().lift(_rustCallWithError(_UniffiConverterTypeDevolutionsCryptoError(),() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_generate_key_func(
        _UniffiConverterUInt32().lower(length),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
List<int> join_shares(List<List<int>> shares) {
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterBytes().lift(_rustCallWithError(_UniffiConverterTypeDevolutionsCryptoError(),() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_join_shares_func(
        _UniffiConverterSequenceBytes().lower(shares),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
List<int> mix_key_exchange(List<int> private_key,List<int> public_key) {
    
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterBytes().lift(_rustCallWithError(_UniffiConverterTypeDevolutionsCryptoError(),() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_mix_key_exchange_func(
        _UniffiConverterBytes().lower(private_key),
        _UniffiConverterBytes().lower(public_key),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
bool validate_header(List<int> data,DataType data_type) {
    
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterBool().lift(_rustCall(() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_validate_header_func(
        _UniffiConverterBytes().lower(data),
        _UniffiConverterTypeDataType().lower(data_type),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
bool verify_password(List<int> password,List<int> hash) {
    
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterBool().lift(_rustCallWithError(_UniffiConverterTypeDevolutionsCryptoError(),() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_verify_password_func(
        _UniffiConverterBytes().lower(password),
        _UniffiConverterBytes().lower(hash),
    _rustCallStatus),
    _rustCallStatus
));
}



// From TopLevelFunctionTemplate: 2
bool verify_signature(List<int> data,List<int> public_key,List<int> signature) {
    
    
    
final Pointer<_UniffiRustCallStatus> _rustCallStatus = calloc<_UniffiRustCallStatus >();
    return _UniffiConverterBool().lift(_rustCallWithError(_UniffiConverterTypeDevolutionsCryptoError(),() => _UniffiLib_uniffi_devolutions_crypto_uniffi_dart_fn_func_verify_signature_func(
        _UniffiConverterBytes().lower(data),
        _UniffiConverterBytes().lower(public_key),
        _UniffiConverterBytes().lower(signature),
    _rustCallStatus),
    _rustCallStatus
));
}



